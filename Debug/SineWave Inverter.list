
SineWave Inverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042f0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08004400  08004400  00005400  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004600  08004600  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004600  08004600  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004600  08004600  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004600  08004600  00005600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004604  08004604  00005604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004608  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001020  2000000c  08004614  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000102c  08004614  0000602c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000081db  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000188e  00000000  00000000  0000e210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  0000faa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000073a  00000000  00000000  00010408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017346  00000000  00000000  00010b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a9a5  00000000  00000000  00027e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087b25  00000000  00000000  0003282d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba352  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a4c  00000000  00000000  000ba398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000bcde4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	080043e8 	.word	0x080043e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	080043e8 	.word	0x080043e8

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	@ 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__gedf2>:
 800071c:	f04f 3cff 	mov.w	ip, #4294967295
 8000720:	e006      	b.n	8000730 <__cmpdf2+0x4>
 8000722:	bf00      	nop

08000724 <__ledf2>:
 8000724:	f04f 0c01 	mov.w	ip, #1
 8000728:	e002      	b.n	8000730 <__cmpdf2+0x4>
 800072a:	bf00      	nop

0800072c <__cmpdf2>:
 800072c:	f04f 0c01 	mov.w	ip, #1
 8000730:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000734:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000738:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800073c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000746:	d01b      	beq.n	8000780 <__cmpdf2+0x54>
 8000748:	b001      	add	sp, #4
 800074a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800074e:	bf0c      	ite	eq
 8000750:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000754:	ea91 0f03 	teqne	r1, r3
 8000758:	bf02      	ittt	eq
 800075a:	ea90 0f02 	teqeq	r0, r2
 800075e:	2000      	moveq	r0, #0
 8000760:	4770      	bxeq	lr
 8000762:	f110 0f00 	cmn.w	r0, #0
 8000766:	ea91 0f03 	teq	r1, r3
 800076a:	bf58      	it	pl
 800076c:	4299      	cmppl	r1, r3
 800076e:	bf08      	it	eq
 8000770:	4290      	cmpeq	r0, r2
 8000772:	bf2c      	ite	cs
 8000774:	17d8      	asrcs	r0, r3, #31
 8000776:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800077a:	f040 0001 	orr.w	r0, r0, #1
 800077e:	4770      	bx	lr
 8000780:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000784:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000788:	d102      	bne.n	8000790 <__cmpdf2+0x64>
 800078a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800078e:	d107      	bne.n	80007a0 <__cmpdf2+0x74>
 8000790:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000794:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000798:	d1d6      	bne.n	8000748 <__cmpdf2+0x1c>
 800079a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800079e:	d0d3      	beq.n	8000748 <__cmpdf2+0x1c>
 80007a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <__aeabi_cdrcmple>:
 80007a8:	4684      	mov	ip, r0
 80007aa:	4610      	mov	r0, r2
 80007ac:	4662      	mov	r2, ip
 80007ae:	468c      	mov	ip, r1
 80007b0:	4619      	mov	r1, r3
 80007b2:	4663      	mov	r3, ip
 80007b4:	e000      	b.n	80007b8 <__aeabi_cdcmpeq>
 80007b6:	bf00      	nop

080007b8 <__aeabi_cdcmpeq>:
 80007b8:	b501      	push	{r0, lr}
 80007ba:	f7ff ffb7 	bl	800072c <__cmpdf2>
 80007be:	2800      	cmp	r0, #0
 80007c0:	bf48      	it	mi
 80007c2:	f110 0f00 	cmnmi.w	r0, #0
 80007c6:	bd01      	pop	{r0, pc}

080007c8 <__aeabi_dcmpeq>:
 80007c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007cc:	f7ff fff4 	bl	80007b8 <__aeabi_cdcmpeq>
 80007d0:	bf0c      	ite	eq
 80007d2:	2001      	moveq	r0, #1
 80007d4:	2000      	movne	r0, #0
 80007d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007da:	bf00      	nop

080007dc <__aeabi_dcmplt>:
 80007dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007e0:	f7ff ffea 	bl	80007b8 <__aeabi_cdcmpeq>
 80007e4:	bf34      	ite	cc
 80007e6:	2001      	movcc	r0, #1
 80007e8:	2000      	movcs	r0, #0
 80007ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ee:	bf00      	nop

080007f0 <__aeabi_dcmple>:
 80007f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007f4:	f7ff ffe0 	bl	80007b8 <__aeabi_cdcmpeq>
 80007f8:	bf94      	ite	ls
 80007fa:	2001      	movls	r0, #1
 80007fc:	2000      	movhi	r0, #0
 80007fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000802:	bf00      	nop

08000804 <__aeabi_dcmpge>:
 8000804:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000808:	f7ff ffce 	bl	80007a8 <__aeabi_cdrcmple>
 800080c:	bf94      	ite	ls
 800080e:	2001      	movls	r0, #1
 8000810:	2000      	movhi	r0, #0
 8000812:	f85d fb08 	ldr.w	pc, [sp], #8
 8000816:	bf00      	nop

08000818 <__aeabi_dcmpgt>:
 8000818:	f84d ed08 	str.w	lr, [sp, #-8]!
 800081c:	f7ff ffc4 	bl	80007a8 <__aeabi_cdrcmple>
 8000820:	bf34      	ite	cc
 8000822:	2001      	movcc	r0, #1
 8000824:	2000      	movcs	r0, #0
 8000826:	f85d fb08 	ldr.w	pc, [sp], #8
 800082a:	bf00      	nop

0800082c <__aeabi_d2iz>:
 800082c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000830:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000834:	d215      	bcs.n	8000862 <__aeabi_d2iz+0x36>
 8000836:	d511      	bpl.n	800085c <__aeabi_d2iz+0x30>
 8000838:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800083c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000840:	d912      	bls.n	8000868 <__aeabi_d2iz+0x3c>
 8000842:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000846:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800084a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800084e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000852:	fa23 f002 	lsr.w	r0, r3, r2
 8000856:	bf18      	it	ne
 8000858:	4240      	negne	r0, r0
 800085a:	4770      	bx	lr
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	4770      	bx	lr
 8000862:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000866:	d105      	bne.n	8000874 <__aeabi_d2iz+0x48>
 8000868:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800086c:	bf08      	it	eq
 800086e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop

0800087c <__aeabi_d2f>:
 800087c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000880:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000884:	bf24      	itt	cs
 8000886:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800088a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800088e:	d90d      	bls.n	80008ac <__aeabi_d2f+0x30>
 8000890:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000894:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000898:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800089c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008a4:	bf08      	it	eq
 80008a6:	f020 0001 	biceq.w	r0, r0, #1
 80008aa:	4770      	bx	lr
 80008ac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008b0:	d121      	bne.n	80008f6 <__aeabi_d2f+0x7a>
 80008b2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008b6:	bfbc      	itt	lt
 80008b8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008bc:	4770      	bxlt	lr
 80008be:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008c6:	f1c2 0218 	rsb	r2, r2, #24
 80008ca:	f1c2 0c20 	rsb	ip, r2, #32
 80008ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80008d2:	fa20 f002 	lsr.w	r0, r0, r2
 80008d6:	bf18      	it	ne
 80008d8:	f040 0001 	orrne.w	r0, r0, #1
 80008dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008e8:	ea40 000c 	orr.w	r0, r0, ip
 80008ec:	fa23 f302 	lsr.w	r3, r3, r2
 80008f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008f4:	e7cc      	b.n	8000890 <__aeabi_d2f+0x14>
 80008f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008fa:	d107      	bne.n	800090c <__aeabi_d2f+0x90>
 80008fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000900:	bf1e      	ittt	ne
 8000902:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000906:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800090a:	4770      	bxne	lr
 800090c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000910:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000914:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop

0800091c <__aeabi_frsub>:
 800091c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000920:	e002      	b.n	8000928 <__addsf3>
 8000922:	bf00      	nop

08000924 <__aeabi_fsub>:
 8000924:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000928 <__addsf3>:
 8000928:	0042      	lsls	r2, r0, #1
 800092a:	bf1f      	itttt	ne
 800092c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000930:	ea92 0f03 	teqne	r2, r3
 8000934:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000938:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800093c:	d06a      	beq.n	8000a14 <__addsf3+0xec>
 800093e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000942:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000946:	bfc1      	itttt	gt
 8000948:	18d2      	addgt	r2, r2, r3
 800094a:	4041      	eorgt	r1, r0
 800094c:	4048      	eorgt	r0, r1
 800094e:	4041      	eorgt	r1, r0
 8000950:	bfb8      	it	lt
 8000952:	425b      	neglt	r3, r3
 8000954:	2b19      	cmp	r3, #25
 8000956:	bf88      	it	hi
 8000958:	4770      	bxhi	lr
 800095a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800095e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000962:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000966:	bf18      	it	ne
 8000968:	4240      	negne	r0, r0
 800096a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800096e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000972:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000976:	bf18      	it	ne
 8000978:	4249      	negne	r1, r1
 800097a:	ea92 0f03 	teq	r2, r3
 800097e:	d03f      	beq.n	8000a00 <__addsf3+0xd8>
 8000980:	f1a2 0201 	sub.w	r2, r2, #1
 8000984:	fa41 fc03 	asr.w	ip, r1, r3
 8000988:	eb10 000c 	adds.w	r0, r0, ip
 800098c:	f1c3 0320 	rsb	r3, r3, #32
 8000990:	fa01 f103 	lsl.w	r1, r1, r3
 8000994:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000998:	d502      	bpl.n	80009a0 <__addsf3+0x78>
 800099a:	4249      	negs	r1, r1
 800099c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009a0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80009a4:	d313      	bcc.n	80009ce <__addsf3+0xa6>
 80009a6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80009aa:	d306      	bcc.n	80009ba <__addsf3+0x92>
 80009ac:	0840      	lsrs	r0, r0, #1
 80009ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80009b2:	f102 0201 	add.w	r2, r2, #1
 80009b6:	2afe      	cmp	r2, #254	@ 0xfe
 80009b8:	d251      	bcs.n	8000a5e <__addsf3+0x136>
 80009ba:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80009be:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009c2:	bf08      	it	eq
 80009c4:	f020 0001 	biceq.w	r0, r0, #1
 80009c8:	ea40 0003 	orr.w	r0, r0, r3
 80009cc:	4770      	bx	lr
 80009ce:	0049      	lsls	r1, r1, #1
 80009d0:	eb40 0000 	adc.w	r0, r0, r0
 80009d4:	3a01      	subs	r2, #1
 80009d6:	bf28      	it	cs
 80009d8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80009dc:	d2ed      	bcs.n	80009ba <__addsf3+0x92>
 80009de:	fab0 fc80 	clz	ip, r0
 80009e2:	f1ac 0c08 	sub.w	ip, ip, #8
 80009e6:	ebb2 020c 	subs.w	r2, r2, ip
 80009ea:	fa00 f00c 	lsl.w	r0, r0, ip
 80009ee:	bfaa      	itet	ge
 80009f0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80009f4:	4252      	neglt	r2, r2
 80009f6:	4318      	orrge	r0, r3
 80009f8:	bfbc      	itt	lt
 80009fa:	40d0      	lsrlt	r0, r2
 80009fc:	4318      	orrlt	r0, r3
 80009fe:	4770      	bx	lr
 8000a00:	f092 0f00 	teq	r2, #0
 8000a04:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a08:	bf06      	itte	eq
 8000a0a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a0e:	3201      	addeq	r2, #1
 8000a10:	3b01      	subne	r3, #1
 8000a12:	e7b5      	b.n	8000980 <__addsf3+0x58>
 8000a14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a1c:	bf18      	it	ne
 8000a1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a22:	d021      	beq.n	8000a68 <__addsf3+0x140>
 8000a24:	ea92 0f03 	teq	r2, r3
 8000a28:	d004      	beq.n	8000a34 <__addsf3+0x10c>
 8000a2a:	f092 0f00 	teq	r2, #0
 8000a2e:	bf08      	it	eq
 8000a30:	4608      	moveq	r0, r1
 8000a32:	4770      	bx	lr
 8000a34:	ea90 0f01 	teq	r0, r1
 8000a38:	bf1c      	itt	ne
 8000a3a:	2000      	movne	r0, #0
 8000a3c:	4770      	bxne	lr
 8000a3e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000a42:	d104      	bne.n	8000a4e <__addsf3+0x126>
 8000a44:	0040      	lsls	r0, r0, #1
 8000a46:	bf28      	it	cs
 8000a48:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000a4c:	4770      	bx	lr
 8000a4e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000a52:	bf3c      	itt	cc
 8000a54:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000a58:	4770      	bxcc	lr
 8000a5a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a5e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000a62:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a66:	4770      	bx	lr
 8000a68:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a6c:	bf16      	itet	ne
 8000a6e:	4608      	movne	r0, r1
 8000a70:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a74:	4601      	movne	r1, r0
 8000a76:	0242      	lsls	r2, r0, #9
 8000a78:	bf06      	itte	eq
 8000a7a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a7e:	ea90 0f01 	teqeq	r0, r1
 8000a82:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000a86:	4770      	bx	lr

08000a88 <__aeabi_ui2f>:
 8000a88:	f04f 0300 	mov.w	r3, #0
 8000a8c:	e004      	b.n	8000a98 <__aeabi_i2f+0x8>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_i2f>:
 8000a90:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000a94:	bf48      	it	mi
 8000a96:	4240      	negmi	r0, r0
 8000a98:	ea5f 0c00 	movs.w	ip, r0
 8000a9c:	bf08      	it	eq
 8000a9e:	4770      	bxeq	lr
 8000aa0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000aa4:	4601      	mov	r1, r0
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	e01c      	b.n	8000ae6 <__aeabi_l2f+0x2a>

08000aac <__aeabi_ul2f>:
 8000aac:	ea50 0201 	orrs.w	r2, r0, r1
 8000ab0:	bf08      	it	eq
 8000ab2:	4770      	bxeq	lr
 8000ab4:	f04f 0300 	mov.w	r3, #0
 8000ab8:	e00a      	b.n	8000ad0 <__aeabi_l2f+0x14>
 8000aba:	bf00      	nop

08000abc <__aeabi_l2f>:
 8000abc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ac0:	bf08      	it	eq
 8000ac2:	4770      	bxeq	lr
 8000ac4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ac8:	d502      	bpl.n	8000ad0 <__aeabi_l2f+0x14>
 8000aca:	4240      	negs	r0, r0
 8000acc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ad0:	ea5f 0c01 	movs.w	ip, r1
 8000ad4:	bf02      	ittt	eq
 8000ad6:	4684      	moveq	ip, r0
 8000ad8:	4601      	moveq	r1, r0
 8000ada:	2000      	moveq	r0, #0
 8000adc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ae6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000aea:	fabc f28c 	clz	r2, ip
 8000aee:	3a08      	subs	r2, #8
 8000af0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000af4:	db10      	blt.n	8000b18 <__aeabi_l2f+0x5c>
 8000af6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000afa:	4463      	add	r3, ip
 8000afc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b00:	f1c2 0220 	rsb	r2, r2, #32
 8000b04:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b08:	fa20 f202 	lsr.w	r2, r0, r2
 8000b0c:	eb43 0002 	adc.w	r0, r3, r2
 8000b10:	bf08      	it	eq
 8000b12:	f020 0001 	biceq.w	r0, r0, #1
 8000b16:	4770      	bx	lr
 8000b18:	f102 0220 	add.w	r2, r2, #32
 8000b1c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b20:	f1c2 0220 	rsb	r2, r2, #32
 8000b24:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b28:	fa21 f202 	lsr.w	r2, r1, r2
 8000b2c:	eb43 0002 	adc.w	r0, r3, r2
 8000b30:	bf08      	it	eq
 8000b32:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_fmul>:
 8000b38:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b40:	bf1e      	ittt	ne
 8000b42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b46:	ea92 0f0c 	teqne	r2, ip
 8000b4a:	ea93 0f0c 	teqne	r3, ip
 8000b4e:	d06f      	beq.n	8000c30 <__aeabi_fmul+0xf8>
 8000b50:	441a      	add	r2, r3
 8000b52:	ea80 0c01 	eor.w	ip, r0, r1
 8000b56:	0240      	lsls	r0, r0, #9
 8000b58:	bf18      	it	ne
 8000b5a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b5e:	d01e      	beq.n	8000b9e <__aeabi_fmul+0x66>
 8000b60:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b64:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b68:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b6c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b70:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b74:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000b78:	bf3e      	ittt	cc
 8000b7a:	0049      	lslcc	r1, r1, #1
 8000b7c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b80:	005b      	lslcc	r3, r3, #1
 8000b82:	ea40 0001 	orr.w	r0, r0, r1
 8000b86:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000b8a:	2afd      	cmp	r2, #253	@ 0xfd
 8000b8c:	d81d      	bhi.n	8000bca <__aeabi_fmul+0x92>
 8000b8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000b92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b96:	bf08      	it	eq
 8000b98:	f020 0001 	biceq.w	r0, r0, #1
 8000b9c:	4770      	bx	lr
 8000b9e:	f090 0f00 	teq	r0, #0
 8000ba2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ba6:	bf08      	it	eq
 8000ba8:	0249      	lsleq	r1, r1, #9
 8000baa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bb2:	3a7f      	subs	r2, #127	@ 0x7f
 8000bb4:	bfc2      	ittt	gt
 8000bb6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000bba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bbe:	4770      	bxgt	lr
 8000bc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	f04f 0300 	mov.w	r3, #0
 8000bc8:	3a01      	subs	r2, #1
 8000bca:	dc5d      	bgt.n	8000c88 <__aeabi_fmul+0x150>
 8000bcc:	f112 0f19 	cmn.w	r2, #25
 8000bd0:	bfdc      	itt	le
 8000bd2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000bd6:	4770      	bxle	lr
 8000bd8:	f1c2 0200 	rsb	r2, r2, #0
 8000bdc:	0041      	lsls	r1, r0, #1
 8000bde:	fa21 f102 	lsr.w	r1, r1, r2
 8000be2:	f1c2 0220 	rsb	r2, r2, #32
 8000be6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bea:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bee:	f140 0000 	adc.w	r0, r0, #0
 8000bf2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000bf6:	bf08      	it	eq
 8000bf8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bfc:	4770      	bx	lr
 8000bfe:	f092 0f00 	teq	r2, #0
 8000c02:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c06:	bf02      	ittt	eq
 8000c08:	0040      	lsleq	r0, r0, #1
 8000c0a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c0e:	3a01      	subeq	r2, #1
 8000c10:	d0f9      	beq.n	8000c06 <__aeabi_fmul+0xce>
 8000c12:	ea40 000c 	orr.w	r0, r0, ip
 8000c16:	f093 0f00 	teq	r3, #0
 8000c1a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c1e:	bf02      	ittt	eq
 8000c20:	0049      	lsleq	r1, r1, #1
 8000c22:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c26:	3b01      	subeq	r3, #1
 8000c28:	d0f9      	beq.n	8000c1e <__aeabi_fmul+0xe6>
 8000c2a:	ea41 010c 	orr.w	r1, r1, ip
 8000c2e:	e78f      	b.n	8000b50 <__aeabi_fmul+0x18>
 8000c30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c34:	ea92 0f0c 	teq	r2, ip
 8000c38:	bf18      	it	ne
 8000c3a:	ea93 0f0c 	teqne	r3, ip
 8000c3e:	d00a      	beq.n	8000c56 <__aeabi_fmul+0x11e>
 8000c40:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c44:	bf18      	it	ne
 8000c46:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c4a:	d1d8      	bne.n	8000bfe <__aeabi_fmul+0xc6>
 8000c4c:	ea80 0001 	eor.w	r0, r0, r1
 8000c50:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f090 0f00 	teq	r0, #0
 8000c5a:	bf17      	itett	ne
 8000c5c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000c60:	4608      	moveq	r0, r1
 8000c62:	f091 0f00 	teqne	r1, #0
 8000c66:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000c6a:	d014      	beq.n	8000c96 <__aeabi_fmul+0x15e>
 8000c6c:	ea92 0f0c 	teq	r2, ip
 8000c70:	d101      	bne.n	8000c76 <__aeabi_fmul+0x13e>
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	d10f      	bne.n	8000c96 <__aeabi_fmul+0x15e>
 8000c76:	ea93 0f0c 	teq	r3, ip
 8000c7a:	d103      	bne.n	8000c84 <__aeabi_fmul+0x14c>
 8000c7c:	024b      	lsls	r3, r1, #9
 8000c7e:	bf18      	it	ne
 8000c80:	4608      	movne	r0, r1
 8000c82:	d108      	bne.n	8000c96 <__aeabi_fmul+0x15e>
 8000c84:	ea80 0001 	eor.w	r0, r0, r1
 8000c88:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c9a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000c9e:	4770      	bx	lr

08000ca0 <__aeabi_fdiv>:
 8000ca0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ca8:	bf1e      	ittt	ne
 8000caa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cae:	ea92 0f0c 	teqne	r2, ip
 8000cb2:	ea93 0f0c 	teqne	r3, ip
 8000cb6:	d069      	beq.n	8000d8c <__aeabi_fdiv+0xec>
 8000cb8:	eba2 0203 	sub.w	r2, r2, r3
 8000cbc:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc0:	0249      	lsls	r1, r1, #9
 8000cc2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cc6:	d037      	beq.n	8000d38 <__aeabi_fdiv+0x98>
 8000cc8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ccc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cd0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cd4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	bf38      	it	cc
 8000cdc:	005b      	lslcc	r3, r3, #1
 8000cde:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ce2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	bf24      	itt	cs
 8000cea:	1a5b      	subcs	r3, r3, r1
 8000cec:	ea40 000c 	orrcs.w	r0, r0, ip
 8000cf0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000cf4:	bf24      	itt	cs
 8000cf6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000cfa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000cfe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d02:	bf24      	itt	cs
 8000d04:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d0c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d10:	bf24      	itt	cs
 8000d12:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d16:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d1a:	011b      	lsls	r3, r3, #4
 8000d1c:	bf18      	it	ne
 8000d1e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d22:	d1e0      	bne.n	8000ce6 <__aeabi_fdiv+0x46>
 8000d24:	2afd      	cmp	r2, #253	@ 0xfd
 8000d26:	f63f af50 	bhi.w	8000bca <__aeabi_fmul+0x92>
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d3c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d40:	327f      	adds	r2, #127	@ 0x7f
 8000d42:	bfc2      	ittt	gt
 8000d44:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d48:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d4c:	4770      	bxgt	lr
 8000d4e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d52:	f04f 0300 	mov.w	r3, #0
 8000d56:	3a01      	subs	r2, #1
 8000d58:	e737      	b.n	8000bca <__aeabi_fmul+0x92>
 8000d5a:	f092 0f00 	teq	r2, #0
 8000d5e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d62:	bf02      	ittt	eq
 8000d64:	0040      	lsleq	r0, r0, #1
 8000d66:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d6a:	3a01      	subeq	r2, #1
 8000d6c:	d0f9      	beq.n	8000d62 <__aeabi_fdiv+0xc2>
 8000d6e:	ea40 000c 	orr.w	r0, r0, ip
 8000d72:	f093 0f00 	teq	r3, #0
 8000d76:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d7a:	bf02      	ittt	eq
 8000d7c:	0049      	lsleq	r1, r1, #1
 8000d7e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d82:	3b01      	subeq	r3, #1
 8000d84:	d0f9      	beq.n	8000d7a <__aeabi_fdiv+0xda>
 8000d86:	ea41 010c 	orr.w	r1, r1, ip
 8000d8a:	e795      	b.n	8000cb8 <__aeabi_fdiv+0x18>
 8000d8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d90:	ea92 0f0c 	teq	r2, ip
 8000d94:	d108      	bne.n	8000da8 <__aeabi_fdiv+0x108>
 8000d96:	0242      	lsls	r2, r0, #9
 8000d98:	f47f af7d 	bne.w	8000c96 <__aeabi_fmul+0x15e>
 8000d9c:	ea93 0f0c 	teq	r3, ip
 8000da0:	f47f af70 	bne.w	8000c84 <__aeabi_fmul+0x14c>
 8000da4:	4608      	mov	r0, r1
 8000da6:	e776      	b.n	8000c96 <__aeabi_fmul+0x15e>
 8000da8:	ea93 0f0c 	teq	r3, ip
 8000dac:	d104      	bne.n	8000db8 <__aeabi_fdiv+0x118>
 8000dae:	024b      	lsls	r3, r1, #9
 8000db0:	f43f af4c 	beq.w	8000c4c <__aeabi_fmul+0x114>
 8000db4:	4608      	mov	r0, r1
 8000db6:	e76e      	b.n	8000c96 <__aeabi_fmul+0x15e>
 8000db8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dbc:	bf18      	it	ne
 8000dbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000dc2:	d1ca      	bne.n	8000d5a <__aeabi_fdiv+0xba>
 8000dc4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000dc8:	f47f af5c 	bne.w	8000c84 <__aeabi_fmul+0x14c>
 8000dcc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000dd0:	f47f af3c 	bne.w	8000c4c <__aeabi_fmul+0x114>
 8000dd4:	e75f      	b.n	8000c96 <__aeabi_fmul+0x15e>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_f2iz>:
 8000dd8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ddc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000de0:	d30f      	bcc.n	8000e02 <__aeabi_f2iz+0x2a>
 8000de2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000de6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000dea:	d90d      	bls.n	8000e08 <__aeabi_f2iz+0x30>
 8000dec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000df0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000df4:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000df8:	fa23 f002 	lsr.w	r0, r3, r2
 8000dfc:	bf18      	it	ne
 8000dfe:	4240      	negne	r0, r0
 8000e00:	4770      	bx	lr
 8000e02:	f04f 0000 	mov.w	r0, #0
 8000e06:	4770      	bx	lr
 8000e08:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e0c:	d101      	bne.n	8000e12 <__aeabi_f2iz+0x3a>
 8000e0e:	0242      	lsls	r2, r0, #9
 8000e10:	d105      	bne.n	8000e1e <__aeabi_f2iz+0x46>
 8000e12:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000e16:	bf08      	it	eq
 8000e18:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000e1c:	4770      	bx	lr
 8000e1e:	f04f 0000 	mov.w	r0, #0
 8000e22:	4770      	bx	lr

08000e24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2a:	f107 0310 	add.w	r3, r7, #16
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e38:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef4 <MX_GPIO_Init+0xd0>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a2d      	ldr	r2, [pc, #180]	@ (8000ef4 <MX_GPIO_Init+0xd0>)
 8000e3e:	f043 0310 	orr.w	r3, r3, #16
 8000e42:	6193      	str	r3, [r2, #24]
 8000e44:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef4 <MX_GPIO_Init+0xd0>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f003 0310 	and.w	r3, r3, #16
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e50:	4b28      	ldr	r3, [pc, #160]	@ (8000ef4 <MX_GPIO_Init+0xd0>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a27      	ldr	r2, [pc, #156]	@ (8000ef4 <MX_GPIO_Init+0xd0>)
 8000e56:	f043 0320 	orr.w	r3, r3, #32
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b25      	ldr	r3, [pc, #148]	@ (8000ef4 <MX_GPIO_Init+0xd0>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f003 0320 	and.w	r3, r3, #32
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e68:	4b22      	ldr	r3, [pc, #136]	@ (8000ef4 <MX_GPIO_Init+0xd0>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	4a21      	ldr	r2, [pc, #132]	@ (8000ef4 <MX_GPIO_Init+0xd0>)
 8000e6e:	f043 0304 	orr.w	r3, r3, #4
 8000e72:	6193      	str	r3, [r2, #24]
 8000e74:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef4 <MX_GPIO_Init+0xd0>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	f003 0304 	and.w	r3, r3, #4
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_13, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000e86:	481c      	ldr	r0, [pc, #112]	@ (8000ef8 <MX_GPIO_Init+0xd4>)
 8000e88:	f000 fe26 	bl	8001ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000e92:	481a      	ldr	r0, [pc, #104]	@ (8000efc <MX_GPIO_Init+0xd8>)
 8000e94:	f000 fe20 	bl	8001ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 8000e98:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000e9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eaa:	f107 0310 	add.w	r3, r7, #16
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4811      	ldr	r0, [pc, #68]	@ (8000ef8 <MX_GPIO_Init+0xd4>)
 8000eb2:	f000 fc8d 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000eb6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000eba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 0310 	add.w	r3, r7, #16
 8000ecc:	4619      	mov	r1, r3
 8000ece:	480b      	ldr	r0, [pc, #44]	@ (8000efc <MX_GPIO_Init+0xd8>)
 8000ed0:	f000 fc7e 	bl	80017d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000ed4:	231f      	movs	r3, #31
 8000ed6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;         // <----- This Option
 8000edc:	2300      	movs	r3, #0
 8000ede:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4805      	ldr	r0, [pc, #20]	@ (8000efc <MX_GPIO_Init+0xd8>)
 8000ee8:	f000 fc72 	bl	80017d0 <HAL_GPIO_Init>

}
 8000eec:	bf00      	nop
 8000eee:	3720      	adds	r7, #32
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40011000 	.word	0x40011000
 8000efc:	40010800 	.word	0x40010800

08000f00 <main>:

void ISR_SINE(void);


int main(void)
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0

  sampleNum = (int)(f_carrier/f_fundamental_1);
 8000f06:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb8 <main+0xb8>)
 8000f08:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000f0c:	601a      	str	r2, [r3, #0]

  radVal = 2 * PI / sampleNum;
 8000f0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000fbc <main+0xbc>)
 8000f10:	4619      	mov	r1, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fd08 	bl	8000928 <__addsf3>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	461c      	mov	r4, r3
 8000f1c:	4b26      	ldr	r3, [pc, #152]	@ (8000fb8 <main+0xb8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff fdb5 	bl	8000a90 <__aeabi_i2f>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	f7ff feb8 	bl	8000ca0 <__aeabi_fdiv>
 8000f30:	4603      	mov	r3, r0
 8000f32:	461a      	mov	r2, r3
 8000f34:	4b22      	ldr	r3, [pc, #136]	@ (8000fc0 <main+0xc0>)
 8000f36:	601a      	str	r2, [r3, #0]

  for(int i=1;i<sampleNum+1;i++){
 8000f38:	2301      	movs	r3, #1
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	e021      	b.n	8000f82 <main+0x82>
	      sineValue[i] = sin(radVal*(i));
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff fda6 	bl	8000a90 <__aeabi_i2f>
 8000f44:	4602      	mov	r2, r0
 8000f46:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc0 <main+0xc0>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	f7ff fdf3 	bl	8000b38 <__aeabi_fmul>
 8000f52:	4603      	mov	r3, r0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fb89 	bl	800066c <__aeabi_f2d>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4610      	mov	r0, r2
 8000f60:	4619      	mov	r1, r3
 8000f62:	f002 fa6b 	bl	800343c <sin>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f7ff fc85 	bl	800087c <__aeabi_d2f>
 8000f72:	4602      	mov	r2, r0
 8000f74:	4913      	ldr	r1, [pc, #76]	@ (8000fc4 <main+0xc4>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=1;i<sampleNum+1;i++){
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <main+0xb8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	ddd8      	ble.n	8000f3e <main+0x3e>
  }

  HAL_Init();
 8000f8c:	f000 fab0 	bl	80014f0 <HAL_Init>

  SystemClock_Config();
 8000f90:	f000 f8be 	bl	8001110 <SystemClock_Config>

  MX_GPIO_Init();
 8000f94:	f7ff ff46 	bl	8000e24 <MX_GPIO_Init>

  MX_TIM1_Init();
 8000f98:	f000 f976 	bl	8001288 <MX_TIM1_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8000f9c:	480a      	ldr	r0, [pc, #40]	@ (8000fc8 <main+0xc8>)
 8000f9e:	f001 f9fb 	bl	8002398 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4808      	ldr	r0, [pc, #32]	@ (8000fc8 <main+0xc8>)
 8000fa6:	f001 faa1 	bl	80024ec <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000faa:	2100      	movs	r1, #0
 8000fac:	4806      	ldr	r0, [pc, #24]	@ (8000fc8 <main+0xc8>)
 8000fae:	f002 f895 	bl	80030dc <HAL_TIMEx_PWMN_Start>

  while (1)
 8000fb2:	bf00      	nop
 8000fb4:	e7fd      	b.n	8000fb2 <main+0xb2>
 8000fb6:	bf00      	nop
 8000fb8:	20000034 	.word	0x20000034
 8000fbc:	40490fdb 	.word	0x40490fdb
 8000fc0:	20000038 	.word	0x20000038
 8000fc4:	2000003c 	.word	0x2000003c
 8000fc8:	20000fe0 	.word	0x20000fe0

08000fcc <ISR_SINE>:

}


/*Function for The Interrupt*/
void ISR_SINE(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	if(b>1){
 8000fd0:	4b45      	ldr	r3, [pc, #276]	@ (80010e8 <ISR_SINE+0x11c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	dd7f      	ble.n	80010d8 <ISR_SINE+0x10c>
	  Duty = (int)(duty_coeff*TIMER_PERIOD*sineValue[k]);
 8000fd8:	4b44      	ldr	r3, [pc, #272]	@ (80010ec <ISR_SINE+0x120>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4944      	ldr	r1, [pc, #272]	@ (80010f0 <ISR_SINE+0x124>)
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fdaa 	bl	8000b38 <__aeabi_fmul>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	4b42      	ldr	r3, [pc, #264]	@ (80010f4 <ISR_SINE+0x128>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a42      	ldr	r2, [pc, #264]	@ (80010f8 <ISR_SINE+0x12c>)
 8000fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f7ff fda0 	bl	8000b38 <__aeabi_fmul>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff feec 	bl	8000dd8 <__aeabi_f2iz>
 8001000:	4603      	mov	r3, r0
 8001002:	4a3e      	ldr	r2, [pc, #248]	@ (80010fc <ISR_SINE+0x130>)
 8001004:	6013      	str	r3, [r2, #0]
	  if (k==0) {
 8001006:	4b3b      	ldr	r3, [pc, #236]	@ (80010f4 <ISR_SINE+0x128>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d108      	bne.n	8001020 <ISR_SINE+0x54>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001014:	483a      	ldr	r0, [pc, #232]	@ (8001100 <ISR_SINE+0x134>)
 8001016:	f000 fd5f 	bl	8001ad8 <HAL_GPIO_WritePin>
		TIM1->CCR1= 0;
 800101a:	4b3a      	ldr	r3, [pc, #232]	@ (8001104 <ISR_SINE+0x138>)
 800101c:	2200      	movs	r2, #0
 800101e:	635a      	str	r2, [r3, #52]	@ 0x34
	  }
	  if (k==(sampleNum/2)) {
 8001020:	4b39      	ldr	r3, [pc, #228]	@ (8001108 <ISR_SINE+0x13c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	0fda      	lsrs	r2, r3, #31
 8001026:	4413      	add	r3, r2
 8001028:	105b      	asrs	r3, r3, #1
 800102a:	461a      	mov	r2, r3
 800102c:	4b31      	ldr	r3, [pc, #196]	@ (80010f4 <ISR_SINE+0x128>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	429a      	cmp	r2, r3
 8001032:	d109      	bne.n	8001048 <ISR_SINE+0x7c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800103a:	4831      	ldr	r0, [pc, #196]	@ (8001100 <ISR_SINE+0x134>)
 800103c:	f000 fd4c 	bl	8001ad8 <HAL_GPIO_WritePin>
		TIM1->CCR1 = TIMER_PERIOD;
 8001040:	4b30      	ldr	r3, [pc, #192]	@ (8001104 <ISR_SINE+0x138>)
 8001042:	f240 529f 	movw	r2, #1439	@ 0x59f
 8001046:	635a      	str	r2, [r3, #52]	@ 0x34
	  }
	  if (k>0 && k<(sampleNum/2))  {
 8001048:	4b2a      	ldr	r3, [pc, #168]	@ (80010f4 <ISR_SINE+0x128>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	dd13      	ble.n	8001078 <ISR_SINE+0xac>
 8001050:	4b2d      	ldr	r3, [pc, #180]	@ (8001108 <ISR_SINE+0x13c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	0fda      	lsrs	r2, r3, #31
 8001056:	4413      	add	r3, r2
 8001058:	105b      	asrs	r3, r3, #1
 800105a:	461a      	mov	r2, r3
 800105c:	4b25      	ldr	r3, [pc, #148]	@ (80010f4 <ISR_SINE+0x128>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	429a      	cmp	r2, r3
 8001062:	dd09      	ble.n	8001078 <ISR_SINE+0xac>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800106a:	4825      	ldr	r0, [pc, #148]	@ (8001100 <ISR_SINE+0x134>)
 800106c:	f000 fd34 	bl	8001ad8 <HAL_GPIO_WritePin>
		TIM1->CCR1 = Duty;
 8001070:	4b22      	ldr	r3, [pc, #136]	@ (80010fc <ISR_SINE+0x130>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b23      	ldr	r3, [pc, #140]	@ (8001104 <ISR_SINE+0x138>)
 8001076:	635a      	str	r2, [r3, #52]	@ 0x34
	  }
	  if (k>0 && k>(sampleNum/2) ) {
 8001078:	4b1e      	ldr	r3, [pc, #120]	@ (80010f4 <ISR_SINE+0x128>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	dd15      	ble.n	80010ac <ISR_SINE+0xe0>
 8001080:	4b21      	ldr	r3, [pc, #132]	@ (8001108 <ISR_SINE+0x13c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	0fda      	lsrs	r2, r3, #31
 8001086:	4413      	add	r3, r2
 8001088:	105b      	asrs	r3, r3, #1
 800108a:	461a      	mov	r2, r3
 800108c:	4b19      	ldr	r3, [pc, #100]	@ (80010f4 <ISR_SINE+0x128>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	429a      	cmp	r2, r3
 8001092:	da0b      	bge.n	80010ac <ISR_SINE+0xe0>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800109a:	4819      	ldr	r0, [pc, #100]	@ (8001100 <ISR_SINE+0x134>)
 800109c:	f000 fd1c 	bl	8001ad8 <HAL_GPIO_WritePin>
		TIM1->CCR1 = TIMER_PERIOD + Duty;
 80010a0:	4b16      	ldr	r3, [pc, #88]	@ (80010fc <ISR_SINE+0x130>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f203 529f 	addw	r2, r3, #1439	@ 0x59f
 80010a8:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <ISR_SINE+0x138>)
 80010aa:	635a      	str	r2, [r3, #52]	@ 0x34
	  }
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80010ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010b0:	4816      	ldr	r0, [pc, #88]	@ (800110c <ISR_SINE+0x140>)
 80010b2:	f000 fd29 	bl	8001b08 <HAL_GPIO_TogglePin>
	  k++;
 80010b6:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <ISR_SINE+0x128>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	4a0d      	ldr	r2, [pc, #52]	@ (80010f4 <ISR_SINE+0x128>)
 80010be:	6013      	str	r3, [r2, #0]
	  if (k > sampleNum ) k=0;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <ISR_SINE+0x128>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b10      	ldr	r3, [pc, #64]	@ (8001108 <ISR_SINE+0x13c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	dd02      	ble.n	80010d2 <ISR_SINE+0x106>
 80010cc:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <ISR_SINE+0x128>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
	  b=0;
 80010d2:	4b05      	ldr	r3, [pc, #20]	@ (80010e8 <ISR_SINE+0x11c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
	}
	b++;
 80010d8:	4b03      	ldr	r3, [pc, #12]	@ (80010e8 <ISR_SINE+0x11c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	3301      	adds	r3, #1
 80010de:	4a02      	ldr	r2, [pc, #8]	@ (80010e8 <ISR_SINE+0x11c>)
 80010e0:	6013      	str	r3, [r2, #0]
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000030 	.word	0x20000030
 80010ec:	20000fdc 	.word	0x20000fdc
 80010f0:	44b3e000 	.word	0x44b3e000
 80010f4:	2000002c 	.word	0x2000002c
 80010f8:	2000003c 	.word	0x2000003c
 80010fc:	20000028 	.word	0x20000028
 8001100:	40010800 	.word	0x40010800
 8001104:	40012c00 	.word	0x40012c00
 8001108:	20000034 	.word	0x20000034
 800110c:	40011000 	.word	0x40011000

08001110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b090      	sub	sp, #64	@ 0x40
 8001114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001116:	f107 0318 	add.w	r3, r7, #24
 800111a:	2228      	movs	r2, #40	@ 0x28
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f002 f95f 	bl	80033e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001132:	2301      	movs	r3, #1
 8001134:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001136:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800113a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800113c:	2300      	movs	r3, #0
 800113e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001140:	2301      	movs	r3, #1
 8001142:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001144:	2302      	movs	r3, #2
 8001146:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001148:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800114c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800114e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001152:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001154:	f107 0318 	add.w	r3, r7, #24
 8001158:	4618      	mov	r0, r3
 800115a:	f000 fcef 	bl	8001b3c <HAL_RCC_OscConfig>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001164:	f000 f819 	bl	800119a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001168:	230f      	movs	r3, #15
 800116a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800116c:	2302      	movs	r3, #2
 800116e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001174:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001178:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	2102      	movs	r1, #2
 8001182:	4618      	mov	r0, r3
 8001184:	f000 ff5c 	bl	8002040 <HAL_RCC_ClockConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800118e:	f000 f804 	bl	800119a <Error_Handler>
  }
}
 8001192:	bf00      	nop
 8001194:	3740      	adds	r7, #64	@ 0x40
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800119e:	b672      	cpsid	i
}
 80011a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a2:	bf00      	nop
 80011a4:	e7fd      	b.n	80011a2 <Error_Handler+0x8>
	...

080011a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011ae:	4b15      	ldr	r3, [pc, #84]	@ (8001204 <HAL_MspInit+0x5c>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	4a14      	ldr	r2, [pc, #80]	@ (8001204 <HAL_MspInit+0x5c>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6193      	str	r3, [r2, #24]
 80011ba:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <HAL_MspInit+0x5c>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <HAL_MspInit+0x5c>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001204 <HAL_MspInit+0x5c>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d0:	61d3      	str	r3, [r2, #28]
 80011d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <HAL_MspInit+0x5c>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011de:	4b0a      	ldr	r3, [pc, #40]	@ (8001208 <HAL_MspInit+0x60>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	4a04      	ldr	r2, [pc, #16]	@ (8001208 <HAL_MspInit+0x60>)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	40021000 	.word	0x40021000
 8001208:	40010000 	.word	0x40010000

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <NMI_Handler+0x4>

08001214 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <MemManage_Handler+0x4>

08001224 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <BusFault_Handler+0x4>

0800122c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <UsageFault_Handler+0x4>

08001234 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr

0800124c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr

08001258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125c:	f000 f98e 	bl	800157c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
//  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
//  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
	ISR_SINE();
 8001268:	f7ff feb0 	bl	8000fcc <ISR_SINE>
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800126c:	4802      	ldr	r0, [pc, #8]	@ (8001278 <TIM1_UP_IRQHandler+0x14>)
 800126e:	f001 f9df 	bl	8002630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000fe0 	.word	0x20000fe0

0800127c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr

08001288 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b096      	sub	sp, #88	@ 0x58
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]
 80012b6:	615a      	str	r2, [r3, #20]
 80012b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2220      	movs	r2, #32
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f002 f88e 	bl	80033e2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012c6:	4b3e      	ldr	r3, [pc, #248]	@ (80013c0 <MX_TIM1_Init+0x138>)
 80012c8:	4a3e      	ldr	r2, [pc, #248]	@ (80013c4 <MX_TIM1_Init+0x13c>)
 80012ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012cc:	4b3c      	ldr	r3, [pc, #240]	@ (80013c0 <MX_TIM1_Init+0x138>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80012d2:	4b3b      	ldr	r3, [pc, #236]	@ (80013c0 <MX_TIM1_Init+0x138>)
 80012d4:	2220      	movs	r2, #32
 80012d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1439;
 80012d8:	4b39      	ldr	r3, [pc, #228]	@ (80013c0 <MX_TIM1_Init+0x138>)
 80012da:	f240 529f 	movw	r2, #1439	@ 0x59f
 80012de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e0:	4b37      	ldr	r3, [pc, #220]	@ (80013c0 <MX_TIM1_Init+0x138>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012e6:	4b36      	ldr	r3, [pc, #216]	@ (80013c0 <MX_TIM1_Init+0x138>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012ec:	4b34      	ldr	r3, [pc, #208]	@ (80013c0 <MX_TIM1_Init+0x138>)
 80012ee:	2280      	movs	r2, #128	@ 0x80
 80012f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012f2:	4833      	ldr	r0, [pc, #204]	@ (80013c0 <MX_TIM1_Init+0x138>)
 80012f4:	f001 f800 	bl	80022f8 <HAL_TIM_Base_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012fe:	f7ff ff4c 	bl	800119a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001302:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001306:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001308:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800130c:	4619      	mov	r1, r3
 800130e:	482c      	ldr	r0, [pc, #176]	@ (80013c0 <MX_TIM1_Init+0x138>)
 8001310:	f001 fb40 	bl	8002994 <HAL_TIM_ConfigClockSource>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800131a:	f7ff ff3e 	bl	800119a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800131e:	4828      	ldr	r0, [pc, #160]	@ (80013c0 <MX_TIM1_Init+0x138>)
 8001320:	f001 f88c 	bl	800243c <HAL_TIM_PWM_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800132a:	f7ff ff36 	bl	800119a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001336:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800133a:	4619      	mov	r1, r3
 800133c:	4820      	ldr	r0, [pc, #128]	@ (80013c0 <MX_TIM1_Init+0x138>)
 800133e:	f001 ff6b 	bl	8003218 <HAL_TIMEx_MasterConfigSynchronization>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001348:	f7ff ff27 	bl	800119a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800134c:	2360      	movs	r3, #96	@ 0x60
 800134e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001354:	2300      	movs	r3, #0
 8001356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001358:	2300      	movs	r3, #0
 800135a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001360:	2300      	movs	r3, #0
 8001362:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001364:	2300      	movs	r3, #0
 8001366:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001368:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800136c:	2200      	movs	r2, #0
 800136e:	4619      	mov	r1, r3
 8001370:	4813      	ldr	r0, [pc, #76]	@ (80013c0 <MX_TIM1_Init+0x138>)
 8001372:	f001 fa4d 	bl	8002810 <HAL_TIM_PWM_ConfigChannel>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800137c:	f7ff ff0d 	bl	800119a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001380:	2300      	movs	r3, #0
 8001382:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 10;
 800138c:	230a      	movs	r3, #10
 800138e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001394:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001398:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	4619      	mov	r1, r3
 80013a2:	4807      	ldr	r0, [pc, #28]	@ (80013c0 <MX_TIM1_Init+0x138>)
 80013a4:	f001 ff96 	bl	80032d4 <HAL_TIMEx_ConfigBreakDeadTime>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80013ae:	f7ff fef4 	bl	800119a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013b2:	4803      	ldr	r0, [pc, #12]	@ (80013c0 <MX_TIM1_Init+0x138>)
 80013b4:	f000 f82e 	bl	8001414 <HAL_TIM_MspPostInit>

}
 80013b8:	bf00      	nop
 80013ba:	3758      	adds	r7, #88	@ 0x58
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000fe0 	.word	0x20000fe0
 80013c4:	40012c00 	.word	0x40012c00

080013c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0d      	ldr	r2, [pc, #52]	@ (800140c <HAL_TIM_Base_MspInit+0x44>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d113      	bne.n	8001402 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013da:	4b0d      	ldr	r3, [pc, #52]	@ (8001410 <HAL_TIM_Base_MspInit+0x48>)
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	4a0c      	ldr	r2, [pc, #48]	@ (8001410 <HAL_TIM_Base_MspInit+0x48>)
 80013e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013e4:	6193      	str	r3, [r2, #24]
 80013e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001410 <HAL_TIM_Base_MspInit+0x48>)
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2100      	movs	r1, #0
 80013f6:	2019      	movs	r0, #25
 80013f8:	f000 f9b3 	bl	8001762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80013fc:	2019      	movs	r0, #25
 80013fe:	f000 f9cc 	bl	800179a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001402:	bf00      	nop
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40012c00 	.word	0x40012c00
 8001410:	40021000 	.word	0x40021000

08001414 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a19      	ldr	r2, [pc, #100]	@ (8001494 <HAL_TIM_MspPostInit+0x80>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d12a      	bne.n	800148a <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001434:	4b18      	ldr	r3, [pc, #96]	@ (8001498 <HAL_TIM_MspPostInit+0x84>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	4a17      	ldr	r2, [pc, #92]	@ (8001498 <HAL_TIM_MspPostInit+0x84>)
 800143a:	f043 0304 	orr.w	r3, r3, #4
 800143e:	6193      	str	r3, [r2, #24]
 8001440:	4b15      	ldr	r3, [pc, #84]	@ (8001498 <HAL_TIM_MspPostInit+0x84>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800144c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001450:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2302      	movs	r3, #2
 8001458:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	4619      	mov	r1, r3
 8001460:	480e      	ldr	r0, [pc, #56]	@ (800149c <HAL_TIM_MspPostInit+0x88>)
 8001462:	f000 f9b5 	bl	80017d0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 8001466:	4b0e      	ldr	r3, [pc, #56]	@ (80014a0 <HAL_TIM_MspPostInit+0x8c>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	61fb      	str	r3, [r7, #28]
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001472:	61fb      	str	r3, [r7, #28]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800147a:	61fb      	str	r3, [r7, #28]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001482:	61fb      	str	r3, [r7, #28]
 8001484:	4a06      	ldr	r2, [pc, #24]	@ (80014a0 <HAL_TIM_MspPostInit+0x8c>)
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800148a:	bf00      	nop
 800148c:	3720      	adds	r7, #32
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40012c00 	.word	0x40012c00
 8001498:	40021000 	.word	0x40021000
 800149c:	40010800 	.word	0x40010800
 80014a0:	40010000 	.word	0x40010000

080014a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014a4:	f7ff feea 	bl	800127c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a8:	480b      	ldr	r0, [pc, #44]	@ (80014d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014aa:	490c      	ldr	r1, [pc, #48]	@ (80014dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014ac:	4a0c      	ldr	r2, [pc, #48]	@ (80014e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b0:	e002      	b.n	80014b8 <LoopCopyDataInit>

080014b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b6:	3304      	adds	r3, #4

080014b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014bc:	d3f9      	bcc.n	80014b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014be:	4a09      	ldr	r2, [pc, #36]	@ (80014e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014c0:	4c09      	ldr	r4, [pc, #36]	@ (80014e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c4:	e001      	b.n	80014ca <LoopFillZerobss>

080014c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c8:	3204      	adds	r2, #4

080014ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014cc:	d3fb      	bcc.n	80014c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ce:	f001 ff91 	bl	80033f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014d2:	f7ff fd15 	bl	8000f00 <main>
  bx lr
 80014d6:	4770      	bx	lr
  ldr r0, =_sdata
 80014d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014e0:	08004608 	.word	0x08004608
  ldr r2, =_sbss
 80014e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014e8:	2000102c 	.word	0x2000102c

080014ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014ec:	e7fe      	b.n	80014ec <ADC1_2_IRQHandler>
	...

080014f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f4:	4b08      	ldr	r3, [pc, #32]	@ (8001518 <HAL_Init+0x28>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a07      	ldr	r2, [pc, #28]	@ (8001518 <HAL_Init+0x28>)
 80014fa:	f043 0310 	orr.w	r3, r3, #16
 80014fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001500:	2003      	movs	r0, #3
 8001502:	f000 f923 	bl	800174c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001506:	200f      	movs	r0, #15
 8001508:	f000 f808 	bl	800151c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800150c:	f7ff fe4c 	bl	80011a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40022000 	.word	0x40022000

0800151c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001524:	4b12      	ldr	r3, [pc, #72]	@ (8001570 <HAL_InitTick+0x54>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b12      	ldr	r3, [pc, #72]	@ (8001574 <HAL_InitTick+0x58>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4619      	mov	r1, r3
 800152e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001532:	fbb3 f3f1 	udiv	r3, r3, r1
 8001536:	fbb2 f3f3 	udiv	r3, r2, r3
 800153a:	4618      	mov	r0, r3
 800153c:	f000 f93b 	bl	80017b6 <HAL_SYSTICK_Config>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e00e      	b.n	8001568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b0f      	cmp	r3, #15
 800154e:	d80a      	bhi.n	8001566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001550:	2200      	movs	r2, #0
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	f04f 30ff 	mov.w	r0, #4294967295
 8001558:	f000 f903 	bl	8001762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800155c:	4a06      	ldr	r2, [pc, #24]	@ (8001578 <HAL_InitTick+0x5c>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	e000      	b.n	8001568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
}
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000000 	.word	0x20000000
 8001574:	20000008 	.word	0x20000008
 8001578:	20000004 	.word	0x20000004

0800157c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001580:	4b05      	ldr	r3, [pc, #20]	@ (8001598 <HAL_IncTick+0x1c>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	4b05      	ldr	r3, [pc, #20]	@ (800159c <HAL_IncTick+0x20>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4413      	add	r3, r2
 800158c:	4a03      	ldr	r2, [pc, #12]	@ (800159c <HAL_IncTick+0x20>)
 800158e:	6013      	str	r3, [r2, #0]
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	20000008 	.word	0x20000008
 800159c:	20001028 	.word	0x20001028

080015a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return uwTick;
 80015a4:	4b02      	ldr	r3, [pc, #8]	@ (80015b0 <HAL_GetTick+0x10>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	20001028 	.word	0x20001028

080015b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c4:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015d0:	4013      	ands	r3, r2
 80015d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e6:	4a04      	ldr	r2, [pc, #16]	@ (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	60d3      	str	r3, [r2, #12]
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001600:	4b04      	ldr	r3, [pc, #16]	@ (8001614 <__NVIC_GetPriorityGrouping+0x18>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	0a1b      	lsrs	r3, r3, #8
 8001606:	f003 0307 	and.w	r3, r3, #7
}
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	2b00      	cmp	r3, #0
 8001628:	db0b      	blt.n	8001642 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	f003 021f 	and.w	r2, r3, #31
 8001630:	4906      	ldr	r1, [pc, #24]	@ (800164c <__NVIC_EnableIRQ+0x34>)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	095b      	lsrs	r3, r3, #5
 8001638:	2001      	movs	r0, #1
 800163a:	fa00 f202 	lsl.w	r2, r0, r2
 800163e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	e000e100 	.word	0xe000e100

08001650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	6039      	str	r1, [r7, #0]
 800165a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001660:	2b00      	cmp	r3, #0
 8001662:	db0a      	blt.n	800167a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	b2da      	uxtb	r2, r3
 8001668:	490c      	ldr	r1, [pc, #48]	@ (800169c <__NVIC_SetPriority+0x4c>)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	0112      	lsls	r2, r2, #4
 8001670:	b2d2      	uxtb	r2, r2
 8001672:	440b      	add	r3, r1
 8001674:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001678:	e00a      	b.n	8001690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4908      	ldr	r1, [pc, #32]	@ (80016a0 <__NVIC_SetPriority+0x50>)
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	3b04      	subs	r3, #4
 8001688:	0112      	lsls	r2, r2, #4
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	440b      	add	r3, r1
 800168e:	761a      	strb	r2, [r3, #24]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000e100 	.word	0xe000e100
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b089      	sub	sp, #36	@ 0x24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f1c3 0307 	rsb	r3, r3, #7
 80016be:	2b04      	cmp	r3, #4
 80016c0:	bf28      	it	cs
 80016c2:	2304      	movcs	r3, #4
 80016c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3304      	adds	r3, #4
 80016ca:	2b06      	cmp	r3, #6
 80016cc:	d902      	bls.n	80016d4 <NVIC_EncodePriority+0x30>
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3b03      	subs	r3, #3
 80016d2:	e000      	b.n	80016d6 <NVIC_EncodePriority+0x32>
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d8:	f04f 32ff 	mov.w	r2, #4294967295
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43da      	mvns	r2, r3
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	401a      	ands	r2, r3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ec:	f04f 31ff 	mov.w	r1, #4294967295
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	fa01 f303 	lsl.w	r3, r1, r3
 80016f6:	43d9      	mvns	r1, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016fc:	4313      	orrs	r3, r2
         );
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3724      	adds	r7, #36	@ 0x24
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3b01      	subs	r3, #1
 8001714:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001718:	d301      	bcc.n	800171e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800171a:	2301      	movs	r3, #1
 800171c:	e00f      	b.n	800173e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800171e:	4a0a      	ldr	r2, [pc, #40]	@ (8001748 <SysTick_Config+0x40>)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3b01      	subs	r3, #1
 8001724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001726:	210f      	movs	r1, #15
 8001728:	f04f 30ff 	mov.w	r0, #4294967295
 800172c:	f7ff ff90 	bl	8001650 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001730:	4b05      	ldr	r3, [pc, #20]	@ (8001748 <SysTick_Config+0x40>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001736:	4b04      	ldr	r3, [pc, #16]	@ (8001748 <SysTick_Config+0x40>)
 8001738:	2207      	movs	r2, #7
 800173a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	e000e010 	.word	0xe000e010

0800174c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ff2d 	bl	80015b4 <__NVIC_SetPriorityGrouping>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001762:	b580      	push	{r7, lr}
 8001764:	b086      	sub	sp, #24
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001774:	f7ff ff42 	bl	80015fc <__NVIC_GetPriorityGrouping>
 8001778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	68b9      	ldr	r1, [r7, #8]
 800177e:	6978      	ldr	r0, [r7, #20]
 8001780:	f7ff ff90 	bl	80016a4 <NVIC_EncodePriority>
 8001784:	4602      	mov	r2, r0
 8001786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178a:	4611      	mov	r1, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff5f 	bl	8001650 <__NVIC_SetPriority>
}
 8001792:	bf00      	nop
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	4603      	mov	r3, r0
 80017a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff35 	bl	8001618 <__NVIC_EnableIRQ>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff ffa2 	bl	8001708 <SysTick_Config>
 80017c4:	4603      	mov	r3, r0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b08b      	sub	sp, #44	@ 0x2c
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017de:	2300      	movs	r3, #0
 80017e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017e2:	e169      	b.n	8001ab8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017e4:	2201      	movs	r2, #1
 80017e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	69fa      	ldr	r2, [r7, #28]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	f040 8158 	bne.w	8001ab2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	4a9a      	ldr	r2, [pc, #616]	@ (8001a70 <HAL_GPIO_Init+0x2a0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d05e      	beq.n	80018ca <HAL_GPIO_Init+0xfa>
 800180c:	4a98      	ldr	r2, [pc, #608]	@ (8001a70 <HAL_GPIO_Init+0x2a0>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d875      	bhi.n	80018fe <HAL_GPIO_Init+0x12e>
 8001812:	4a98      	ldr	r2, [pc, #608]	@ (8001a74 <HAL_GPIO_Init+0x2a4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d058      	beq.n	80018ca <HAL_GPIO_Init+0xfa>
 8001818:	4a96      	ldr	r2, [pc, #600]	@ (8001a74 <HAL_GPIO_Init+0x2a4>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d86f      	bhi.n	80018fe <HAL_GPIO_Init+0x12e>
 800181e:	4a96      	ldr	r2, [pc, #600]	@ (8001a78 <HAL_GPIO_Init+0x2a8>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d052      	beq.n	80018ca <HAL_GPIO_Init+0xfa>
 8001824:	4a94      	ldr	r2, [pc, #592]	@ (8001a78 <HAL_GPIO_Init+0x2a8>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d869      	bhi.n	80018fe <HAL_GPIO_Init+0x12e>
 800182a:	4a94      	ldr	r2, [pc, #592]	@ (8001a7c <HAL_GPIO_Init+0x2ac>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d04c      	beq.n	80018ca <HAL_GPIO_Init+0xfa>
 8001830:	4a92      	ldr	r2, [pc, #584]	@ (8001a7c <HAL_GPIO_Init+0x2ac>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d863      	bhi.n	80018fe <HAL_GPIO_Init+0x12e>
 8001836:	4a92      	ldr	r2, [pc, #584]	@ (8001a80 <HAL_GPIO_Init+0x2b0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d046      	beq.n	80018ca <HAL_GPIO_Init+0xfa>
 800183c:	4a90      	ldr	r2, [pc, #576]	@ (8001a80 <HAL_GPIO_Init+0x2b0>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d85d      	bhi.n	80018fe <HAL_GPIO_Init+0x12e>
 8001842:	2b12      	cmp	r3, #18
 8001844:	d82a      	bhi.n	800189c <HAL_GPIO_Init+0xcc>
 8001846:	2b12      	cmp	r3, #18
 8001848:	d859      	bhi.n	80018fe <HAL_GPIO_Init+0x12e>
 800184a:	a201      	add	r2, pc, #4	@ (adr r2, 8001850 <HAL_GPIO_Init+0x80>)
 800184c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001850:	080018cb 	.word	0x080018cb
 8001854:	080018a5 	.word	0x080018a5
 8001858:	080018b7 	.word	0x080018b7
 800185c:	080018f9 	.word	0x080018f9
 8001860:	080018ff 	.word	0x080018ff
 8001864:	080018ff 	.word	0x080018ff
 8001868:	080018ff 	.word	0x080018ff
 800186c:	080018ff 	.word	0x080018ff
 8001870:	080018ff 	.word	0x080018ff
 8001874:	080018ff 	.word	0x080018ff
 8001878:	080018ff 	.word	0x080018ff
 800187c:	080018ff 	.word	0x080018ff
 8001880:	080018ff 	.word	0x080018ff
 8001884:	080018ff 	.word	0x080018ff
 8001888:	080018ff 	.word	0x080018ff
 800188c:	080018ff 	.word	0x080018ff
 8001890:	080018ff 	.word	0x080018ff
 8001894:	080018ad 	.word	0x080018ad
 8001898:	080018c1 	.word	0x080018c1
 800189c:	4a79      	ldr	r2, [pc, #484]	@ (8001a84 <HAL_GPIO_Init+0x2b4>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d013      	beq.n	80018ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018a2:	e02c      	b.n	80018fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	623b      	str	r3, [r7, #32]
          break;
 80018aa:	e029      	b.n	8001900 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	3304      	adds	r3, #4
 80018b2:	623b      	str	r3, [r7, #32]
          break;
 80018b4:	e024      	b.n	8001900 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	3308      	adds	r3, #8
 80018bc:	623b      	str	r3, [r7, #32]
          break;
 80018be:	e01f      	b.n	8001900 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	330c      	adds	r3, #12
 80018c6:	623b      	str	r3, [r7, #32]
          break;
 80018c8:	e01a      	b.n	8001900 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d102      	bne.n	80018d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018d2:	2304      	movs	r3, #4
 80018d4:	623b      	str	r3, [r7, #32]
          break;
 80018d6:	e013      	b.n	8001900 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d105      	bne.n	80018ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018e0:	2308      	movs	r3, #8
 80018e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	611a      	str	r2, [r3, #16]
          break;
 80018ea:	e009      	b.n	8001900 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018ec:	2308      	movs	r3, #8
 80018ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69fa      	ldr	r2, [r7, #28]
 80018f4:	615a      	str	r2, [r3, #20]
          break;
 80018f6:	e003      	b.n	8001900 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018f8:	2300      	movs	r3, #0
 80018fa:	623b      	str	r3, [r7, #32]
          break;
 80018fc:	e000      	b.n	8001900 <HAL_GPIO_Init+0x130>
          break;
 80018fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	2bff      	cmp	r3, #255	@ 0xff
 8001904:	d801      	bhi.n	800190a <HAL_GPIO_Init+0x13a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	e001      	b.n	800190e <HAL_GPIO_Init+0x13e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3304      	adds	r3, #4
 800190e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	2bff      	cmp	r3, #255	@ 0xff
 8001914:	d802      	bhi.n	800191c <HAL_GPIO_Init+0x14c>
 8001916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	e002      	b.n	8001922 <HAL_GPIO_Init+0x152>
 800191c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191e:	3b08      	subs	r3, #8
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	210f      	movs	r1, #15
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	fa01 f303 	lsl.w	r3, r1, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	401a      	ands	r2, r3
 8001934:	6a39      	ldr	r1, [r7, #32]
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	fa01 f303 	lsl.w	r3, r1, r3
 800193c:	431a      	orrs	r2, r3
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 80b1 	beq.w	8001ab2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001950:	4b4d      	ldr	r3, [pc, #308]	@ (8001a88 <HAL_GPIO_Init+0x2b8>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	4a4c      	ldr	r2, [pc, #304]	@ (8001a88 <HAL_GPIO_Init+0x2b8>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	6193      	str	r3, [r2, #24]
 800195c:	4b4a      	ldr	r3, [pc, #296]	@ (8001a88 <HAL_GPIO_Init+0x2b8>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001968:	4a48      	ldr	r2, [pc, #288]	@ (8001a8c <HAL_GPIO_Init+0x2bc>)
 800196a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196c:	089b      	lsrs	r3, r3, #2
 800196e:	3302      	adds	r3, #2
 8001970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001974:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	220f      	movs	r2, #15
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	4013      	ands	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a40      	ldr	r2, [pc, #256]	@ (8001a90 <HAL_GPIO_Init+0x2c0>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d013      	beq.n	80019bc <HAL_GPIO_Init+0x1ec>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a3f      	ldr	r2, [pc, #252]	@ (8001a94 <HAL_GPIO_Init+0x2c4>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d00d      	beq.n	80019b8 <HAL_GPIO_Init+0x1e8>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a3e      	ldr	r2, [pc, #248]	@ (8001a98 <HAL_GPIO_Init+0x2c8>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d007      	beq.n	80019b4 <HAL_GPIO_Init+0x1e4>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a3d      	ldr	r2, [pc, #244]	@ (8001a9c <HAL_GPIO_Init+0x2cc>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d101      	bne.n	80019b0 <HAL_GPIO_Init+0x1e0>
 80019ac:	2303      	movs	r3, #3
 80019ae:	e006      	b.n	80019be <HAL_GPIO_Init+0x1ee>
 80019b0:	2304      	movs	r3, #4
 80019b2:	e004      	b.n	80019be <HAL_GPIO_Init+0x1ee>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e002      	b.n	80019be <HAL_GPIO_Init+0x1ee>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <HAL_GPIO_Init+0x1ee>
 80019bc:	2300      	movs	r3, #0
 80019be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019c0:	f002 0203 	and.w	r2, r2, #3
 80019c4:	0092      	lsls	r2, r2, #2
 80019c6:	4093      	lsls	r3, r2
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019ce:	492f      	ldr	r1, [pc, #188]	@ (8001a8c <HAL_GPIO_Init+0x2bc>)
 80019d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d2:	089b      	lsrs	r3, r3, #2
 80019d4:	3302      	adds	r3, #2
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d006      	beq.n	80019f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019e8:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa0 <HAL_GPIO_Init+0x2d0>)
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	492c      	ldr	r1, [pc, #176]	@ (8001aa0 <HAL_GPIO_Init+0x2d0>)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	608b      	str	r3, [r1, #8]
 80019f4:	e006      	b.n	8001a04 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019f6:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa0 <HAL_GPIO_Init+0x2d0>)
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	4928      	ldr	r1, [pc, #160]	@ (8001aa0 <HAL_GPIO_Init+0x2d0>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d006      	beq.n	8001a1e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a10:	4b23      	ldr	r3, [pc, #140]	@ (8001aa0 <HAL_GPIO_Init+0x2d0>)
 8001a12:	68da      	ldr	r2, [r3, #12]
 8001a14:	4922      	ldr	r1, [pc, #136]	@ (8001aa0 <HAL_GPIO_Init+0x2d0>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	60cb      	str	r3, [r1, #12]
 8001a1c:	e006      	b.n	8001a2c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a1e:	4b20      	ldr	r3, [pc, #128]	@ (8001aa0 <HAL_GPIO_Init+0x2d0>)
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	491e      	ldr	r1, [pc, #120]	@ (8001aa0 <HAL_GPIO_Init+0x2d0>)
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d006      	beq.n	8001a46 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a38:	4b19      	ldr	r3, [pc, #100]	@ (8001aa0 <HAL_GPIO_Init+0x2d0>)
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	4918      	ldr	r1, [pc, #96]	@ (8001aa0 <HAL_GPIO_Init+0x2d0>)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	604b      	str	r3, [r1, #4]
 8001a44:	e006      	b.n	8001a54 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a46:	4b16      	ldr	r3, [pc, #88]	@ (8001aa0 <HAL_GPIO_Init+0x2d0>)
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	4914      	ldr	r1, [pc, #80]	@ (8001aa0 <HAL_GPIO_Init+0x2d0>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d021      	beq.n	8001aa4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a60:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa0 <HAL_GPIO_Init+0x2d0>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	490e      	ldr	r1, [pc, #56]	@ (8001aa0 <HAL_GPIO_Init+0x2d0>)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	600b      	str	r3, [r1, #0]
 8001a6c:	e021      	b.n	8001ab2 <HAL_GPIO_Init+0x2e2>
 8001a6e:	bf00      	nop
 8001a70:	10320000 	.word	0x10320000
 8001a74:	10310000 	.word	0x10310000
 8001a78:	10220000 	.word	0x10220000
 8001a7c:	10210000 	.word	0x10210000
 8001a80:	10120000 	.word	0x10120000
 8001a84:	10110000 	.word	0x10110000
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40010000 	.word	0x40010000
 8001a90:	40010800 	.word	0x40010800
 8001a94:	40010c00 	.word	0x40010c00
 8001a98:	40011000 	.word	0x40011000
 8001a9c:	40011400 	.word	0x40011400
 8001aa0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <HAL_GPIO_Init+0x304>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	4909      	ldr	r1, [pc, #36]	@ (8001ad4 <HAL_GPIO_Init+0x304>)
 8001aae:	4013      	ands	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abe:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f47f ae8e 	bne.w	80017e4 <HAL_GPIO_Init+0x14>
  }
}
 8001ac8:	bf00      	nop
 8001aca:	bf00      	nop
 8001acc:	372c      	adds	r7, #44	@ 0x2c
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	40010400 	.word	0x40010400

08001ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ae8:	787b      	ldrb	r3, [r7, #1]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aee:	887a      	ldrh	r2, [r7, #2]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001af4:	e003      	b.n	8001afe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001af6:	887b      	ldrh	r3, [r7, #2]
 8001af8:	041a      	lsls	r2, r3, #16
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	611a      	str	r2, [r3, #16]
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr

08001b08 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b1a:	887a      	ldrh	r2, [r7, #2]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	041a      	lsls	r2, r3, #16
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	43d9      	mvns	r1, r3
 8001b26:	887b      	ldrh	r3, [r7, #2]
 8001b28:	400b      	ands	r3, r1
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	611a      	str	r2, [r3, #16]
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr
	...

08001b3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e272      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 8087 	beq.w	8001c6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b5c:	4b92      	ldr	r3, [pc, #584]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 030c 	and.w	r3, r3, #12
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d00c      	beq.n	8001b82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b68:	4b8f      	ldr	r3, [pc, #572]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 030c 	and.w	r3, r3, #12
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d112      	bne.n	8001b9a <HAL_RCC_OscConfig+0x5e>
 8001b74:	4b8c      	ldr	r3, [pc, #560]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b80:	d10b      	bne.n	8001b9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b82:	4b89      	ldr	r3, [pc, #548]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d06c      	beq.n	8001c68 <HAL_RCC_OscConfig+0x12c>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d168      	bne.n	8001c68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e24c      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ba2:	d106      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x76>
 8001ba4:	4b80      	ldr	r3, [pc, #512]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a7f      	ldr	r2, [pc, #508]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001baa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	e02e      	b.n	8001c10 <HAL_RCC_OscConfig+0xd4>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x98>
 8001bba:	4b7b      	ldr	r3, [pc, #492]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a7a      	ldr	r2, [pc, #488]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	4b78      	ldr	r3, [pc, #480]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a77      	ldr	r2, [pc, #476]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	e01d      	b.n	8001c10 <HAL_RCC_OscConfig+0xd4>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0xbc>
 8001bde:	4b72      	ldr	r3, [pc, #456]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a71      	ldr	r2, [pc, #452]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	4b6f      	ldr	r3, [pc, #444]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a6e      	ldr	r2, [pc, #440]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	e00b      	b.n	8001c10 <HAL_RCC_OscConfig+0xd4>
 8001bf8:	4b6b      	ldr	r3, [pc, #428]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a6a      	ldr	r2, [pc, #424]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	4b68      	ldr	r3, [pc, #416]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a67      	ldr	r2, [pc, #412]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d013      	beq.n	8001c40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c18:	f7ff fcc2 	bl	80015a0 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c20:	f7ff fcbe 	bl	80015a0 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b64      	cmp	r3, #100	@ 0x64
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e200      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c32:	4b5d      	ldr	r3, [pc, #372]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0xe4>
 8001c3e:	e014      	b.n	8001c6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7ff fcae 	bl	80015a0 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c48:	f7ff fcaa 	bl	80015a0 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b64      	cmp	r3, #100	@ 0x64
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e1ec      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c5a:	4b53      	ldr	r3, [pc, #332]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x10c>
 8001c66:	e000      	b.n	8001c6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d063      	beq.n	8001d3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c76:	4b4c      	ldr	r3, [pc, #304]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00b      	beq.n	8001c9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c82:	4b49      	ldr	r3, [pc, #292]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d11c      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x18c>
 8001c8e:	4b46      	ldr	r3, [pc, #280]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d116      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9a:	4b43      	ldr	r3, [pc, #268]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d005      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x176>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d001      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e1c0      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb2:	4b3d      	ldr	r3, [pc, #244]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4939      	ldr	r1, [pc, #228]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc6:	e03a      	b.n	8001d3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d020      	beq.n	8001d12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd0:	4b36      	ldr	r3, [pc, #216]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd6:	f7ff fc63 	bl	80015a0 <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cde:	f7ff fc5f 	bl	80015a0 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e1a1      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f0      	beq.n	8001cde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfc:	4b2a      	ldr	r3, [pc, #168]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4927      	ldr	r1, [pc, #156]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	600b      	str	r3, [r1, #0]
 8001d10:	e015      	b.n	8001d3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d12:	4b26      	ldr	r3, [pc, #152]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d18:	f7ff fc42 	bl	80015a0 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d20:	f7ff fc3e 	bl	80015a0 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e180      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d32:	4b1d      	ldr	r3, [pc, #116]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d03a      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d019      	beq.n	8001d86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d52:	4b17      	ldr	r3, [pc, #92]	@ (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d58:	f7ff fc22 	bl	80015a0 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d60:	f7ff fc1e 	bl	80015a0 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e160      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d72:	4b0d      	ldr	r3, [pc, #52]	@ (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d7e:	2001      	movs	r0, #1
 8001d80:	f000 fa9c 	bl	80022bc <RCC_Delay>
 8001d84:	e01c      	b.n	8001dc0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d86:	4b0a      	ldr	r3, [pc, #40]	@ (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8c:	f7ff fc08 	bl	80015a0 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d92:	e00f      	b.n	8001db4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d94:	f7ff fc04 	bl	80015a0 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d908      	bls.n	8001db4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e146      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
 8001da6:	bf00      	nop
 8001da8:	40021000 	.word	0x40021000
 8001dac:	42420000 	.word	0x42420000
 8001db0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db4:	4b92      	ldr	r3, [pc, #584]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1e9      	bne.n	8001d94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 80a6 	beq.w	8001f1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd2:	4b8b      	ldr	r3, [pc, #556]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10d      	bne.n	8001dfa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dde:	4b88      	ldr	r3, [pc, #544]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	4a87      	ldr	r2, [pc, #540]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001de8:	61d3      	str	r3, [r2, #28]
 8001dea:	4b85      	ldr	r3, [pc, #532]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001df6:	2301      	movs	r3, #1
 8001df8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfa:	4b82      	ldr	r3, [pc, #520]	@ (8002004 <HAL_RCC_OscConfig+0x4c8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d118      	bne.n	8001e38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e06:	4b7f      	ldr	r3, [pc, #508]	@ (8002004 <HAL_RCC_OscConfig+0x4c8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a7e      	ldr	r2, [pc, #504]	@ (8002004 <HAL_RCC_OscConfig+0x4c8>)
 8001e0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e12:	f7ff fbc5 	bl	80015a0 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1a:	f7ff fbc1 	bl	80015a0 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b64      	cmp	r3, #100	@ 0x64
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e103      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2c:	4b75      	ldr	r3, [pc, #468]	@ (8002004 <HAL_RCC_OscConfig+0x4c8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d106      	bne.n	8001e4e <HAL_RCC_OscConfig+0x312>
 8001e40:	4b6f      	ldr	r3, [pc, #444]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	4a6e      	ldr	r2, [pc, #440]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6213      	str	r3, [r2, #32]
 8001e4c:	e02d      	b.n	8001eaa <HAL_RCC_OscConfig+0x36e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x334>
 8001e56:	4b6a      	ldr	r3, [pc, #424]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	4a69      	ldr	r2, [pc, #420]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e5c:	f023 0301 	bic.w	r3, r3, #1
 8001e60:	6213      	str	r3, [r2, #32]
 8001e62:	4b67      	ldr	r3, [pc, #412]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	4a66      	ldr	r2, [pc, #408]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e68:	f023 0304 	bic.w	r3, r3, #4
 8001e6c:	6213      	str	r3, [r2, #32]
 8001e6e:	e01c      	b.n	8001eaa <HAL_RCC_OscConfig+0x36e>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b05      	cmp	r3, #5
 8001e76:	d10c      	bne.n	8001e92 <HAL_RCC_OscConfig+0x356>
 8001e78:	4b61      	ldr	r3, [pc, #388]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	4a60      	ldr	r2, [pc, #384]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	f043 0304 	orr.w	r3, r3, #4
 8001e82:	6213      	str	r3, [r2, #32]
 8001e84:	4b5e      	ldr	r3, [pc, #376]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	4a5d      	ldr	r2, [pc, #372]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6213      	str	r3, [r2, #32]
 8001e90:	e00b      	b.n	8001eaa <HAL_RCC_OscConfig+0x36e>
 8001e92:	4b5b      	ldr	r3, [pc, #364]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	4a5a      	ldr	r2, [pc, #360]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	f023 0301 	bic.w	r3, r3, #1
 8001e9c:	6213      	str	r3, [r2, #32]
 8001e9e:	4b58      	ldr	r3, [pc, #352]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	4a57      	ldr	r2, [pc, #348]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001ea4:	f023 0304 	bic.w	r3, r3, #4
 8001ea8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d015      	beq.n	8001ede <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb2:	f7ff fb75 	bl	80015a0 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb8:	e00a      	b.n	8001ed0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eba:	f7ff fb71 	bl	80015a0 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e0b1      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed0:	4b4b      	ldr	r3, [pc, #300]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0ee      	beq.n	8001eba <HAL_RCC_OscConfig+0x37e>
 8001edc:	e014      	b.n	8001f08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ede:	f7ff fb5f 	bl	80015a0 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee4:	e00a      	b.n	8001efc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee6:	f7ff fb5b 	bl	80015a0 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e09b      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efc:	4b40      	ldr	r3, [pc, #256]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1ee      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f08:	7dfb      	ldrb	r3, [r7, #23]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d105      	bne.n	8001f1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f0e:	4b3c      	ldr	r3, [pc, #240]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	4a3b      	ldr	r2, [pc, #236]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 8087 	beq.w	8002032 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f24:	4b36      	ldr	r3, [pc, #216]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 030c 	and.w	r3, r3, #12
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d061      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d146      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f38:	4b33      	ldr	r3, [pc, #204]	@ (8002008 <HAL_RCC_OscConfig+0x4cc>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3e:	f7ff fb2f 	bl	80015a0 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f46:	f7ff fb2b 	bl	80015a0 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e06d      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f58:	4b29      	ldr	r3, [pc, #164]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1f0      	bne.n	8001f46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f6c:	d108      	bne.n	8001f80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f6e:	4b24      	ldr	r3, [pc, #144]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	4921      	ldr	r1, [pc, #132]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f80:	4b1f      	ldr	r3, [pc, #124]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a19      	ldr	r1, [r3, #32]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f90:	430b      	orrs	r3, r1
 8001f92:	491b      	ldr	r1, [pc, #108]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f98:	4b1b      	ldr	r3, [pc, #108]	@ (8002008 <HAL_RCC_OscConfig+0x4cc>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9e:	f7ff faff 	bl	80015a0 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa6:	f7ff fafb 	bl	80015a0 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e03d      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fb8:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x46a>
 8001fc4:	e035      	b.n	8002032 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc6:	4b10      	ldr	r3, [pc, #64]	@ (8002008 <HAL_RCC_OscConfig+0x4cc>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fcc:	f7ff fae8 	bl	80015a0 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd4:	f7ff fae4 	bl	80015a0 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e026      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe6:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x498>
 8001ff2:	e01e      	b.n	8002032 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d107      	bne.n	800200c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e019      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
 8002000:	40021000 	.word	0x40021000
 8002004:	40007000 	.word	0x40007000
 8002008:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800200c:	4b0b      	ldr	r3, [pc, #44]	@ (800203c <HAL_RCC_OscConfig+0x500>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	429a      	cmp	r2, r3
 800201e:	d106      	bne.n	800202e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202a:	429a      	cmp	r2, r3
 800202c:	d001      	beq.n	8002032 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40021000 	.word	0x40021000

08002040 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0d0      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002054:	4b6a      	ldr	r3, [pc, #424]	@ (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d910      	bls.n	8002084 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002062:	4b67      	ldr	r3, [pc, #412]	@ (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 0207 	bic.w	r2, r3, #7
 800206a:	4965      	ldr	r1, [pc, #404]	@ (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	4313      	orrs	r3, r2
 8002070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002072:	4b63      	ldr	r3, [pc, #396]	@ (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d001      	beq.n	8002084 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0b8      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d020      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800209c:	4b59      	ldr	r3, [pc, #356]	@ (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	4a58      	ldr	r2, [pc, #352]	@ (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b4:	4b53      	ldr	r3, [pc, #332]	@ (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	4a52      	ldr	r2, [pc, #328]	@ (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80020be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c0:	4b50      	ldr	r3, [pc, #320]	@ (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	494d      	ldr	r1, [pc, #308]	@ (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d040      	beq.n	8002160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d107      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	4b47      	ldr	r3, [pc, #284]	@ (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d115      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e07f      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d107      	bne.n	800210e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fe:	4b41      	ldr	r3, [pc, #260]	@ (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d109      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e073      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210e:	4b3d      	ldr	r3, [pc, #244]	@ (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e06b      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800211e:	4b39      	ldr	r3, [pc, #228]	@ (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f023 0203 	bic.w	r2, r3, #3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4936      	ldr	r1, [pc, #216]	@ (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 800212c:	4313      	orrs	r3, r2
 800212e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002130:	f7ff fa36 	bl	80015a0 <HAL_GetTick>
 8002134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002136:	e00a      	b.n	800214e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002138:	f7ff fa32 	bl	80015a0 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002146:	4293      	cmp	r3, r2
 8002148:	d901      	bls.n	800214e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e053      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214e:	4b2d      	ldr	r3, [pc, #180]	@ (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 020c 	and.w	r2, r3, #12
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	429a      	cmp	r2, r3
 800215e:	d1eb      	bne.n	8002138 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002160:	4b27      	ldr	r3, [pc, #156]	@ (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d210      	bcs.n	8002190 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216e:	4b24      	ldr	r3, [pc, #144]	@ (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 0207 	bic.w	r2, r3, #7
 8002176:	4922      	ldr	r1, [pc, #136]	@ (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	4313      	orrs	r3, r2
 800217c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800217e:	4b20      	ldr	r3, [pc, #128]	@ (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e032      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d008      	beq.n	80021ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800219c:	4b19      	ldr	r3, [pc, #100]	@ (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4916      	ldr	r1, [pc, #88]	@ (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d009      	beq.n	80021ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021ba:	4b12      	ldr	r3, [pc, #72]	@ (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	490e      	ldr	r1, [pc, #56]	@ (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ce:	f000 f821 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 80021d2:	4602      	mov	r2, r0
 80021d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	490a      	ldr	r1, [pc, #40]	@ (8002208 <HAL_RCC_ClockConfig+0x1c8>)
 80021e0:	5ccb      	ldrb	r3, [r1, r3]
 80021e2:	fa22 f303 	lsr.w	r3, r2, r3
 80021e6:	4a09      	ldr	r2, [pc, #36]	@ (800220c <HAL_RCC_ClockConfig+0x1cc>)
 80021e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ea:	4b09      	ldr	r3, [pc, #36]	@ (8002210 <HAL_RCC_ClockConfig+0x1d0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff f994 	bl	800151c <HAL_InitTick>

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40022000 	.word	0x40022000
 8002204:	40021000 	.word	0x40021000
 8002208:	08004400 	.word	0x08004400
 800220c:	20000000 	.word	0x20000000
 8002210:	20000004 	.word	0x20000004

08002214 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	2300      	movs	r3, #0
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	2300      	movs	r3, #0
 8002228:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800222e:	4b1e      	ldr	r3, [pc, #120]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b04      	cmp	r3, #4
 800223c:	d002      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0x30>
 800223e:	2b08      	cmp	r3, #8
 8002240:	d003      	beq.n	800224a <HAL_RCC_GetSysClockFreq+0x36>
 8002242:	e027      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002244:	4b19      	ldr	r3, [pc, #100]	@ (80022ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002246:	613b      	str	r3, [r7, #16]
      break;
 8002248:	e027      	b.n	800229a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	0c9b      	lsrs	r3, r3, #18
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	4a17      	ldr	r2, [pc, #92]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002254:	5cd3      	ldrb	r3, [r2, r3]
 8002256:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d010      	beq.n	8002284 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002262:	4b11      	ldr	r3, [pc, #68]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	0c5b      	lsrs	r3, r3, #17
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	4a11      	ldr	r2, [pc, #68]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800226e:	5cd3      	ldrb	r3, [r2, r3]
 8002270:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a0d      	ldr	r2, [pc, #52]	@ (80022ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002276:	fb03 f202 	mul.w	r2, r3, r2
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	e004      	b.n	800228e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a0c      	ldr	r2, [pc, #48]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002288:	fb02 f303 	mul.w	r3, r2, r3
 800228c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	613b      	str	r3, [r7, #16]
      break;
 8002292:	e002      	b.n	800229a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002294:	4b05      	ldr	r3, [pc, #20]	@ (80022ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002296:	613b      	str	r3, [r7, #16]
      break;
 8002298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800229a:	693b      	ldr	r3, [r7, #16]
}
 800229c:	4618      	mov	r0, r3
 800229e:	371c      	adds	r7, #28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000
 80022ac:	007a1200 	.word	0x007a1200
 80022b0:	08004410 	.word	0x08004410
 80022b4:	08004420 	.word	0x08004420
 80022b8:	003d0900 	.word	0x003d0900

080022bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022c4:	4b0a      	ldr	r3, [pc, #40]	@ (80022f0 <RCC_Delay+0x34>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a0a      	ldr	r2, [pc, #40]	@ (80022f4 <RCC_Delay+0x38>)
 80022ca:	fba2 2303 	umull	r2, r3, r2, r3
 80022ce:	0a5b      	lsrs	r3, r3, #9
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	fb02 f303 	mul.w	r3, r2, r3
 80022d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022d8:	bf00      	nop
  }
  while (Delay --);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	1e5a      	subs	r2, r3, #1
 80022de:	60fa      	str	r2, [r7, #12]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1f9      	bne.n	80022d8 <RCC_Delay+0x1c>
}
 80022e4:	bf00      	nop
 80022e6:	bf00      	nop
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr
 80022f0:	20000000 	.word	0x20000000
 80022f4:	10624dd3 	.word	0x10624dd3

080022f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e041      	b.n	800238e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d106      	bne.n	8002324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff f852 	bl	80013c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2202      	movs	r2, #2
 8002328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3304      	adds	r3, #4
 8002334:	4619      	mov	r1, r3
 8002336:	4610      	mov	r0, r2
 8002338:	f000 fc20 	bl	8002b7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d001      	beq.n	80023b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e03a      	b.n	8002426 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0201 	orr.w	r2, r2, #1
 80023c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a18      	ldr	r2, [pc, #96]	@ (8002430 <HAL_TIM_Base_Start_IT+0x98>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d00e      	beq.n	80023f0 <HAL_TIM_Base_Start_IT+0x58>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023da:	d009      	beq.n	80023f0 <HAL_TIM_Base_Start_IT+0x58>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a14      	ldr	r2, [pc, #80]	@ (8002434 <HAL_TIM_Base_Start_IT+0x9c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d004      	beq.n	80023f0 <HAL_TIM_Base_Start_IT+0x58>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a13      	ldr	r2, [pc, #76]	@ (8002438 <HAL_TIM_Base_Start_IT+0xa0>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d111      	bne.n	8002414 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2b06      	cmp	r3, #6
 8002400:	d010      	beq.n	8002424 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f042 0201 	orr.w	r2, r2, #1
 8002410:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002412:	e007      	b.n	8002424 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	40012c00 	.word	0x40012c00
 8002434:	40000400 	.word	0x40000400
 8002438:	40000800 	.word	0x40000800

0800243c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e041      	b.n	80024d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d106      	bne.n	8002468 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f839 	bl	80024da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3304      	adds	r3, #4
 8002478:	4619      	mov	r1, r3
 800247a:	4610      	mov	r0, r2
 800247c:	f000 fb7e 	bl	8002b7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d109      	bne.n	8002510 <HAL_TIM_PWM_Start+0x24>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b01      	cmp	r3, #1
 8002506:	bf14      	ite	ne
 8002508:	2301      	movne	r3, #1
 800250a:	2300      	moveq	r3, #0
 800250c:	b2db      	uxtb	r3, r3
 800250e:	e022      	b.n	8002556 <HAL_TIM_PWM_Start+0x6a>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	2b04      	cmp	r3, #4
 8002514:	d109      	bne.n	800252a <HAL_TIM_PWM_Start+0x3e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b01      	cmp	r3, #1
 8002520:	bf14      	ite	ne
 8002522:	2301      	movne	r3, #1
 8002524:	2300      	moveq	r3, #0
 8002526:	b2db      	uxtb	r3, r3
 8002528:	e015      	b.n	8002556 <HAL_TIM_PWM_Start+0x6a>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	2b08      	cmp	r3, #8
 800252e:	d109      	bne.n	8002544 <HAL_TIM_PWM_Start+0x58>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b01      	cmp	r3, #1
 800253a:	bf14      	ite	ne
 800253c:	2301      	movne	r3, #1
 800253e:	2300      	moveq	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	e008      	b.n	8002556 <HAL_TIM_PWM_Start+0x6a>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b01      	cmp	r3, #1
 800254e:	bf14      	ite	ne
 8002550:	2301      	movne	r3, #1
 8002552:	2300      	moveq	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e05e      	b.n	800261c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d104      	bne.n	800256e <HAL_TIM_PWM_Start+0x82>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800256c:	e013      	b.n	8002596 <HAL_TIM_PWM_Start+0xaa>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b04      	cmp	r3, #4
 8002572:	d104      	bne.n	800257e <HAL_TIM_PWM_Start+0x92>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800257c:	e00b      	b.n	8002596 <HAL_TIM_PWM_Start+0xaa>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b08      	cmp	r3, #8
 8002582:	d104      	bne.n	800258e <HAL_TIM_PWM_Start+0xa2>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800258c:	e003      	b.n	8002596 <HAL_TIM_PWM_Start+0xaa>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2202      	movs	r2, #2
 8002592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2201      	movs	r2, #1
 800259c:	6839      	ldr	r1, [r7, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 fd78 	bl	8003094 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002624 <HAL_TIM_PWM_Start+0x138>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d107      	bne.n	80025be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a18      	ldr	r2, [pc, #96]	@ (8002624 <HAL_TIM_PWM_Start+0x138>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d00e      	beq.n	80025e6 <HAL_TIM_PWM_Start+0xfa>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025d0:	d009      	beq.n	80025e6 <HAL_TIM_PWM_Start+0xfa>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a14      	ldr	r2, [pc, #80]	@ (8002628 <HAL_TIM_PWM_Start+0x13c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d004      	beq.n	80025e6 <HAL_TIM_PWM_Start+0xfa>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a12      	ldr	r2, [pc, #72]	@ (800262c <HAL_TIM_PWM_Start+0x140>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d111      	bne.n	800260a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2b06      	cmp	r3, #6
 80025f6:	d010      	beq.n	800261a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0201 	orr.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002608:	e007      	b.n	800261a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 0201 	orr.w	r2, r2, #1
 8002618:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40012c00 	.word	0x40012c00
 8002628:	40000400 	.word	0x40000400
 800262c:	40000800 	.word	0x40000800

08002630 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d020      	beq.n	8002694 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d01b      	beq.n	8002694 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f06f 0202 	mvn.w	r2, #2
 8002664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 fa63 	bl	8002b46 <HAL_TIM_IC_CaptureCallback>
 8002680:	e005      	b.n	800268e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 fa56 	bl	8002b34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 fa65 	bl	8002b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f003 0304 	and.w	r3, r3, #4
 800269a:	2b00      	cmp	r3, #0
 800269c:	d020      	beq.n	80026e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d01b      	beq.n	80026e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0204 	mvn.w	r2, #4
 80026b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2202      	movs	r2, #2
 80026b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 fa3d 	bl	8002b46 <HAL_TIM_IC_CaptureCallback>
 80026cc:	e005      	b.n	80026da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fa30 	bl	8002b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 fa3f 	bl	8002b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d020      	beq.n	800272c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d01b      	beq.n	800272c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f06f 0208 	mvn.w	r2, #8
 80026fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2204      	movs	r2, #4
 8002702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 fa17 	bl	8002b46 <HAL_TIM_IC_CaptureCallback>
 8002718:	e005      	b.n	8002726 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 fa0a 	bl	8002b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 fa19 	bl	8002b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	f003 0310 	and.w	r3, r3, #16
 8002732:	2b00      	cmp	r3, #0
 8002734:	d020      	beq.n	8002778 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f003 0310 	and.w	r3, r3, #16
 800273c:	2b00      	cmp	r3, #0
 800273e:	d01b      	beq.n	8002778 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f06f 0210 	mvn.w	r2, #16
 8002748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2208      	movs	r2, #8
 800274e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f9f1 	bl	8002b46 <HAL_TIM_IC_CaptureCallback>
 8002764:	e005      	b.n	8002772 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f9e4 	bl	8002b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f9f3 	bl	8002b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00c      	beq.n	800279c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d007      	beq.n	800279c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f06f 0201 	mvn.w	r2, #1
 8002794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f9c3 	bl	8002b22 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00c      	beq.n	80027c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d007      	beq.n	80027c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80027b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 fde4 	bl	8003388 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00c      	beq.n	80027e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d007      	beq.n	80027e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80027dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f9c3 	bl	8002b6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f003 0320 	and.w	r3, r3, #32
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00c      	beq.n	8002808 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f003 0320 	and.w	r3, r3, #32
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d007      	beq.n	8002808 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0220 	mvn.w	r2, #32
 8002800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fdb7 	bl	8003376 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002808:	bf00      	nop
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800281c:	2300      	movs	r3, #0
 800281e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002826:	2b01      	cmp	r3, #1
 8002828:	d101      	bne.n	800282e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800282a:	2302      	movs	r3, #2
 800282c:	e0ae      	b.n	800298c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b0c      	cmp	r3, #12
 800283a:	f200 809f 	bhi.w	800297c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800283e:	a201      	add	r2, pc, #4	@ (adr r2, 8002844 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002844:	08002879 	.word	0x08002879
 8002848:	0800297d 	.word	0x0800297d
 800284c:	0800297d 	.word	0x0800297d
 8002850:	0800297d 	.word	0x0800297d
 8002854:	080028b9 	.word	0x080028b9
 8002858:	0800297d 	.word	0x0800297d
 800285c:	0800297d 	.word	0x0800297d
 8002860:	0800297d 	.word	0x0800297d
 8002864:	080028fb 	.word	0x080028fb
 8002868:	0800297d 	.word	0x0800297d
 800286c:	0800297d 	.word	0x0800297d
 8002870:	0800297d 	.word	0x0800297d
 8002874:	0800293b 	.word	0x0800293b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68b9      	ldr	r1, [r7, #8]
 800287e:	4618      	mov	r0, r3
 8002880:	f000 f9ea 	bl	8002c58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699a      	ldr	r2, [r3, #24]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0208 	orr.w	r2, r2, #8
 8002892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699a      	ldr	r2, [r3, #24]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0204 	bic.w	r2, r2, #4
 80028a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6999      	ldr	r1, [r3, #24]
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	691a      	ldr	r2, [r3, #16]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	619a      	str	r2, [r3, #24]
      break;
 80028b6:	e064      	b.n	8002982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 fa30 	bl	8002d24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	699a      	ldr	r2, [r3, #24]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699a      	ldr	r2, [r3, #24]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6999      	ldr	r1, [r3, #24]
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	021a      	lsls	r2, r3, #8
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	619a      	str	r2, [r3, #24]
      break;
 80028f8:	e043      	b.n	8002982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68b9      	ldr	r1, [r7, #8]
 8002900:	4618      	mov	r0, r3
 8002902:	f000 fa79 	bl	8002df8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	69da      	ldr	r2, [r3, #28]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f042 0208 	orr.w	r2, r2, #8
 8002914:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	69da      	ldr	r2, [r3, #28]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0204 	bic.w	r2, r2, #4
 8002924:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	69d9      	ldr	r1, [r3, #28]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	61da      	str	r2, [r3, #28]
      break;
 8002938:	e023      	b.n	8002982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68b9      	ldr	r1, [r7, #8]
 8002940:	4618      	mov	r0, r3
 8002942:	f000 fac3 	bl	8002ecc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	69da      	ldr	r2, [r3, #28]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002954:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	69da      	ldr	r2, [r3, #28]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002964:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	69d9      	ldr	r1, [r3, #28]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	021a      	lsls	r2, r3, #8
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	61da      	str	r2, [r3, #28]
      break;
 800297a:	e002      	b.n	8002982 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	75fb      	strb	r3, [r7, #23]
      break;
 8002980:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800298a:	7dfb      	ldrb	r3, [r7, #23]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_TIM_ConfigClockSource+0x1c>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e0b4      	b.n	8002b1a <HAL_TIM_ConfigClockSource+0x186>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80029ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029e8:	d03e      	beq.n	8002a68 <HAL_TIM_ConfigClockSource+0xd4>
 80029ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029ee:	f200 8087 	bhi.w	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 80029f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029f6:	f000 8086 	beq.w	8002b06 <HAL_TIM_ConfigClockSource+0x172>
 80029fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029fe:	d87f      	bhi.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 8002a00:	2b70      	cmp	r3, #112	@ 0x70
 8002a02:	d01a      	beq.n	8002a3a <HAL_TIM_ConfigClockSource+0xa6>
 8002a04:	2b70      	cmp	r3, #112	@ 0x70
 8002a06:	d87b      	bhi.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 8002a08:	2b60      	cmp	r3, #96	@ 0x60
 8002a0a:	d050      	beq.n	8002aae <HAL_TIM_ConfigClockSource+0x11a>
 8002a0c:	2b60      	cmp	r3, #96	@ 0x60
 8002a0e:	d877      	bhi.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 8002a10:	2b50      	cmp	r3, #80	@ 0x50
 8002a12:	d03c      	beq.n	8002a8e <HAL_TIM_ConfigClockSource+0xfa>
 8002a14:	2b50      	cmp	r3, #80	@ 0x50
 8002a16:	d873      	bhi.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 8002a18:	2b40      	cmp	r3, #64	@ 0x40
 8002a1a:	d058      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0x13a>
 8002a1c:	2b40      	cmp	r3, #64	@ 0x40
 8002a1e:	d86f      	bhi.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 8002a20:	2b30      	cmp	r3, #48	@ 0x30
 8002a22:	d064      	beq.n	8002aee <HAL_TIM_ConfigClockSource+0x15a>
 8002a24:	2b30      	cmp	r3, #48	@ 0x30
 8002a26:	d86b      	bhi.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 8002a28:	2b20      	cmp	r3, #32
 8002a2a:	d060      	beq.n	8002aee <HAL_TIM_ConfigClockSource+0x15a>
 8002a2c:	2b20      	cmp	r3, #32
 8002a2e:	d867      	bhi.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d05c      	beq.n	8002aee <HAL_TIM_ConfigClockSource+0x15a>
 8002a34:	2b10      	cmp	r3, #16
 8002a36:	d05a      	beq.n	8002aee <HAL_TIM_ConfigClockSource+0x15a>
 8002a38:	e062      	b.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a4a:	f000 fb04 	bl	8003056 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002a5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	609a      	str	r2, [r3, #8]
      break;
 8002a66:	e04f      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a78:	f000 faed 	bl	8003056 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a8a:	609a      	str	r2, [r3, #8]
      break;
 8002a8c:	e03c      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	f000 fa64 	bl	8002f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2150      	movs	r1, #80	@ 0x50
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fabb 	bl	8003022 <TIM_ITRx_SetConfig>
      break;
 8002aac:	e02c      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aba:	461a      	mov	r2, r3
 8002abc:	f000 fa82 	bl	8002fc4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2160      	movs	r1, #96	@ 0x60
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 faab 	bl	8003022 <TIM_ITRx_SetConfig>
      break;
 8002acc:	e01c      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ada:	461a      	mov	r2, r3
 8002adc:	f000 fa44 	bl	8002f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2140      	movs	r1, #64	@ 0x40
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 fa9b 	bl	8003022 <TIM_ITRx_SetConfig>
      break;
 8002aec:	e00c      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4619      	mov	r1, r3
 8002af8:	4610      	mov	r0, r2
 8002afa:	f000 fa92 	bl	8003022 <TIM_ITRx_SetConfig>
      break;
 8002afe:	e003      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
      break;
 8002b04:	e000      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr

08002b6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr

08002b7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a2f      	ldr	r2, [pc, #188]	@ (8002c4c <TIM_Base_SetConfig+0xd0>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d00b      	beq.n	8002bac <TIM_Base_SetConfig+0x30>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b9a:	d007      	beq.n	8002bac <TIM_Base_SetConfig+0x30>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a2c      	ldr	r2, [pc, #176]	@ (8002c50 <TIM_Base_SetConfig+0xd4>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d003      	beq.n	8002bac <TIM_Base_SetConfig+0x30>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a2b      	ldr	r2, [pc, #172]	@ (8002c54 <TIM_Base_SetConfig+0xd8>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d108      	bne.n	8002bbe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a22      	ldr	r2, [pc, #136]	@ (8002c4c <TIM_Base_SetConfig+0xd0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d00b      	beq.n	8002bde <TIM_Base_SetConfig+0x62>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bcc:	d007      	beq.n	8002bde <TIM_Base_SetConfig+0x62>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a1f      	ldr	r2, [pc, #124]	@ (8002c50 <TIM_Base_SetConfig+0xd4>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d003      	beq.n	8002bde <TIM_Base_SetConfig+0x62>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a1e      	ldr	r2, [pc, #120]	@ (8002c54 <TIM_Base_SetConfig+0xd8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d108      	bne.n	8002bf0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002be4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a0d      	ldr	r2, [pc, #52]	@ (8002c4c <TIM_Base_SetConfig+0xd0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d103      	bne.n	8002c24 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d005      	beq.n	8002c42 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	f023 0201 	bic.w	r2, r3, #1
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	611a      	str	r2, [r3, #16]
  }
}
 8002c42:	bf00      	nop
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr
 8002c4c:	40012c00 	.word	0x40012c00
 8002c50:	40000400 	.word	0x40000400
 8002c54:	40000800 	.word	0x40000800

08002c58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	f023 0201 	bic.w	r2, r3, #1
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f023 0303 	bic.w	r3, r3, #3
 8002c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f023 0302 	bic.w	r3, r3, #2
 8002ca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a1c      	ldr	r2, [pc, #112]	@ (8002d20 <TIM_OC1_SetConfig+0xc8>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d10c      	bne.n	8002cce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f023 0308 	bic.w	r3, r3, #8
 8002cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f023 0304 	bic.w	r3, r3, #4
 8002ccc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a13      	ldr	r2, [pc, #76]	@ (8002d20 <TIM_OC1_SetConfig+0xc8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d111      	bne.n	8002cfa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	621a      	str	r2, [r3, #32]
}
 8002d14:	bf00      	nop
 8002d16:	371c      	adds	r7, #28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40012c00 	.word	0x40012c00

08002d24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	f023 0210 	bic.w	r2, r3, #16
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	021b      	lsls	r3, r3, #8
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f023 0320 	bic.w	r3, r3, #32
 8002d6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a1d      	ldr	r2, [pc, #116]	@ (8002df4 <TIM_OC2_SetConfig+0xd0>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d10d      	bne.n	8002da0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a14      	ldr	r2, [pc, #80]	@ (8002df4 <TIM_OC2_SetConfig+0xd0>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d113      	bne.n	8002dd0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002dae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002db6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	621a      	str	r2, [r3, #32]
}
 8002dea:	bf00      	nop
 8002dec:	371c      	adds	r7, #28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr
 8002df4:	40012c00 	.word	0x40012c00

08002df8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f023 0303 	bic.w	r3, r3, #3
 8002e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	021b      	lsls	r3, r3, #8
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a1d      	ldr	r2, [pc, #116]	@ (8002ec8 <TIM_OC3_SetConfig+0xd0>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d10d      	bne.n	8002e72 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002e5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a14      	ldr	r2, [pc, #80]	@ (8002ec8 <TIM_OC3_SetConfig+0xd0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d113      	bne.n	8002ea2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	621a      	str	r2, [r3, #32]
}
 8002ebc:	bf00      	nop
 8002ebe:	371c      	adds	r7, #28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40012c00 	.word	0x40012c00

08002ecc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	021b      	lsls	r3, r3, #8
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	031b      	lsls	r3, r3, #12
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a0f      	ldr	r2, [pc, #60]	@ (8002f64 <TIM_OC4_SetConfig+0x98>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d109      	bne.n	8002f40 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	019b      	lsls	r3, r3, #6
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	621a      	str	r2, [r3, #32]
}
 8002f5a:	bf00      	nop
 8002f5c:	371c      	adds	r7, #28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr
 8002f64:	40012c00 	.word	0x40012c00

08002f68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b087      	sub	sp, #28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	f023 0201 	bic.w	r2, r3, #1
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f023 030a 	bic.w	r3, r3, #10
 8002fa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	621a      	str	r2, [r3, #32]
}
 8002fba:	bf00      	nop
 8002fbc:	371c      	adds	r7, #28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr

08002fc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b087      	sub	sp, #28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	f023 0210 	bic.w	r2, r3, #16
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002fee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	031b      	lsls	r3, r3, #12
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003000:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	4313      	orrs	r3, r2
 800300a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	621a      	str	r2, [r3, #32]
}
 8003018:	bf00      	nop
 800301a:	371c      	adds	r7, #28
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr

08003022 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003022:	b480      	push	{r7}
 8003024:	b085      	sub	sp, #20
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003038:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4313      	orrs	r3, r2
 8003040:	f043 0307 	orr.w	r3, r3, #7
 8003044:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	609a      	str	r2, [r3, #8]
}
 800304c:	bf00      	nop
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	bc80      	pop	{r7}
 8003054:	4770      	bx	lr

08003056 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003056:	b480      	push	{r7}
 8003058:	b087      	sub	sp, #28
 800305a:	af00      	add	r7, sp, #0
 800305c:	60f8      	str	r0, [r7, #12]
 800305e:	60b9      	str	r1, [r7, #8]
 8003060:	607a      	str	r2, [r7, #4]
 8003062:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003070:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	021a      	lsls	r2, r3, #8
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	431a      	orrs	r2, r3
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	4313      	orrs	r3, r2
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	4313      	orrs	r3, r2
 8003082:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	609a      	str	r2, [r3, #8]
}
 800308a:	bf00      	nop
 800308c:	371c      	adds	r7, #28
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr

08003094 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003094:	b480      	push	{r7}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f003 031f 	and.w	r3, r3, #31
 80030a6:	2201      	movs	r2, #1
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a1a      	ldr	r2, [r3, #32]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	43db      	mvns	r3, r3
 80030b6:	401a      	ands	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a1a      	ldr	r2, [r3, #32]
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f003 031f 	and.w	r3, r3, #31
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	fa01 f303 	lsl.w	r3, r1, r3
 80030cc:	431a      	orrs	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	621a      	str	r2, [r3, #32]
}
 80030d2:	bf00      	nop
 80030d4:	371c      	adds	r7, #28
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d109      	bne.n	8003100 <HAL_TIMEx_PWMN_Start+0x24>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	bf14      	ite	ne
 80030f8:	2301      	movne	r3, #1
 80030fa:	2300      	moveq	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e022      	b.n	8003146 <HAL_TIMEx_PWMN_Start+0x6a>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2b04      	cmp	r3, #4
 8003104:	d109      	bne.n	800311a <HAL_TIMEx_PWMN_Start+0x3e>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b01      	cmp	r3, #1
 8003110:	bf14      	ite	ne
 8003112:	2301      	movne	r3, #1
 8003114:	2300      	moveq	r3, #0
 8003116:	b2db      	uxtb	r3, r3
 8003118:	e015      	b.n	8003146 <HAL_TIMEx_PWMN_Start+0x6a>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b08      	cmp	r3, #8
 800311e:	d109      	bne.n	8003134 <HAL_TIMEx_PWMN_Start+0x58>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b01      	cmp	r3, #1
 800312a:	bf14      	ite	ne
 800312c:	2301      	movne	r3, #1
 800312e:	2300      	moveq	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	e008      	b.n	8003146 <HAL_TIMEx_PWMN_Start+0x6a>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b01      	cmp	r3, #1
 800313e:	bf14      	ite	ne
 8003140:	2301      	movne	r3, #1
 8003142:	2300      	moveq	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e059      	b.n	8003202 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d104      	bne.n	800315e <HAL_TIMEx_PWMN_Start+0x82>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800315c:	e013      	b.n	8003186 <HAL_TIMEx_PWMN_Start+0xaa>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2b04      	cmp	r3, #4
 8003162:	d104      	bne.n	800316e <HAL_TIMEx_PWMN_Start+0x92>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800316c:	e00b      	b.n	8003186 <HAL_TIMEx_PWMN_Start+0xaa>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b08      	cmp	r3, #8
 8003172:	d104      	bne.n	800317e <HAL_TIMEx_PWMN_Start+0xa2>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800317c:	e003      	b.n	8003186 <HAL_TIMEx_PWMN_Start+0xaa>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2202      	movs	r2, #2
 8003182:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2204      	movs	r2, #4
 800318c:	6839      	ldr	r1, [r7, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f000 f903 	bl	800339a <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031a2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a18      	ldr	r2, [pc, #96]	@ (800320c <HAL_TIMEx_PWMN_Start+0x130>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d00e      	beq.n	80031cc <HAL_TIMEx_PWMN_Start+0xf0>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031b6:	d009      	beq.n	80031cc <HAL_TIMEx_PWMN_Start+0xf0>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a14      	ldr	r2, [pc, #80]	@ (8003210 <HAL_TIMEx_PWMN_Start+0x134>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d004      	beq.n	80031cc <HAL_TIMEx_PWMN_Start+0xf0>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a13      	ldr	r2, [pc, #76]	@ (8003214 <HAL_TIMEx_PWMN_Start+0x138>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d111      	bne.n	80031f0 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2b06      	cmp	r3, #6
 80031dc:	d010      	beq.n	8003200 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 0201 	orr.w	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ee:	e007      	b.n	8003200 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40012c00 	.word	0x40012c00
 8003210:	40000400 	.word	0x40000400
 8003214:	40000800 	.word	0x40000800

08003218 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800322c:	2302      	movs	r3, #2
 800322e:	e046      	b.n	80032be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003256:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a16      	ldr	r2, [pc, #88]	@ (80032c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d00e      	beq.n	8003292 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800327c:	d009      	beq.n	8003292 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a12      	ldr	r2, [pc, #72]	@ (80032cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d004      	beq.n	8003292 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a10      	ldr	r2, [pc, #64]	@ (80032d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d10c      	bne.n	80032ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003298:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr
 80032c8:	40012c00 	.word	0x40012c00
 80032cc:	40000400 	.word	0x40000400
 80032d0:	40000800 	.word	0x40000800

080032d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d101      	bne.n	80032f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80032ec:	2302      	movs	r3, #2
 80032ee:	e03d      	b.n	800336c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	4313      	orrs	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4313      	orrs	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	4313      	orrs	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	bc80      	pop	{r7}
 8003374:	4770      	bx	lr

08003376 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr

08003388 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr

0800339a <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800339a:	b480      	push	{r7}
 800339c:	b087      	sub	sp, #28
 800339e:	af00      	add	r7, sp, #0
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	f003 030f 	and.w	r3, r3, #15
 80033ac:	2204      	movs	r2, #4
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a1a      	ldr	r2, [r3, #32]
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	43db      	mvns	r3, r3
 80033bc:	401a      	ands	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a1a      	ldr	r2, [r3, #32]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	f003 030f 	and.w	r3, r3, #15
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	fa01 f303 	lsl.w	r3, r1, r3
 80033d2:	431a      	orrs	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	621a      	str	r2, [r3, #32]
}
 80033d8:	bf00      	nop
 80033da:	371c      	adds	r7, #28
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr

080033e2 <memset>:
 80033e2:	4603      	mov	r3, r0
 80033e4:	4402      	add	r2, r0
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d100      	bne.n	80033ec <memset+0xa>
 80033ea:	4770      	bx	lr
 80033ec:	f803 1b01 	strb.w	r1, [r3], #1
 80033f0:	e7f9      	b.n	80033e6 <memset+0x4>
	...

080033f4 <__libc_init_array>:
 80033f4:	b570      	push	{r4, r5, r6, lr}
 80033f6:	2600      	movs	r6, #0
 80033f8:	4d0c      	ldr	r5, [pc, #48]	@ (800342c <__libc_init_array+0x38>)
 80033fa:	4c0d      	ldr	r4, [pc, #52]	@ (8003430 <__libc_init_array+0x3c>)
 80033fc:	1b64      	subs	r4, r4, r5
 80033fe:	10a4      	asrs	r4, r4, #2
 8003400:	42a6      	cmp	r6, r4
 8003402:	d109      	bne.n	8003418 <__libc_init_array+0x24>
 8003404:	f000 fff0 	bl	80043e8 <_init>
 8003408:	2600      	movs	r6, #0
 800340a:	4d0a      	ldr	r5, [pc, #40]	@ (8003434 <__libc_init_array+0x40>)
 800340c:	4c0a      	ldr	r4, [pc, #40]	@ (8003438 <__libc_init_array+0x44>)
 800340e:	1b64      	subs	r4, r4, r5
 8003410:	10a4      	asrs	r4, r4, #2
 8003412:	42a6      	cmp	r6, r4
 8003414:	d105      	bne.n	8003422 <__libc_init_array+0x2e>
 8003416:	bd70      	pop	{r4, r5, r6, pc}
 8003418:	f855 3b04 	ldr.w	r3, [r5], #4
 800341c:	4798      	blx	r3
 800341e:	3601      	adds	r6, #1
 8003420:	e7ee      	b.n	8003400 <__libc_init_array+0xc>
 8003422:	f855 3b04 	ldr.w	r3, [r5], #4
 8003426:	4798      	blx	r3
 8003428:	3601      	adds	r6, #1
 800342a:	e7f2      	b.n	8003412 <__libc_init_array+0x1e>
 800342c:	08004600 	.word	0x08004600
 8003430:	08004600 	.word	0x08004600
 8003434:	08004600 	.word	0x08004600
 8003438:	08004604 	.word	0x08004604

0800343c <sin>:
 800343c:	b530      	push	{r4, r5, lr}
 800343e:	4d20      	ldr	r5, [pc, #128]	@ (80034c0 <sin+0x84>)
 8003440:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8003444:	42ac      	cmp	r4, r5
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	b087      	sub	sp, #28
 800344c:	d806      	bhi.n	800345c <sin+0x20>
 800344e:	2300      	movs	r3, #0
 8003450:	2200      	movs	r2, #0
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	2300      	movs	r3, #0
 8003456:	f000 f8f7 	bl	8003648 <__kernel_sin>
 800345a:	e004      	b.n	8003466 <sin+0x2a>
 800345c:	4d19      	ldr	r5, [pc, #100]	@ (80034c4 <sin+0x88>)
 800345e:	42ac      	cmp	r4, r5
 8003460:	d903      	bls.n	800346a <sin+0x2e>
 8003462:	f7fc ffa3 	bl	80003ac <__aeabi_dsub>
 8003466:	b007      	add	sp, #28
 8003468:	bd30      	pop	{r4, r5, pc}
 800346a:	aa02      	add	r2, sp, #8
 800346c:	f000 f9a4 	bl	80037b8 <__ieee754_rem_pio2>
 8003470:	f000 0003 	and.w	r0, r0, #3
 8003474:	2801      	cmp	r0, #1
 8003476:	d009      	beq.n	800348c <sin+0x50>
 8003478:	2802      	cmp	r0, #2
 800347a:	d00e      	beq.n	800349a <sin+0x5e>
 800347c:	b9c0      	cbnz	r0, 80034b0 <sin+0x74>
 800347e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003482:	2301      	movs	r3, #1
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800348a:	e7e4      	b.n	8003456 <sin+0x1a>
 800348c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003490:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003494:	f000 f818 	bl	80034c8 <__kernel_cos>
 8003498:	e7e5      	b.n	8003466 <sin+0x2a>
 800349a:	2301      	movs	r3, #1
 800349c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80034a6:	f000 f8cf 	bl	8003648 <__kernel_sin>
 80034aa:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 80034ae:	e7da      	b.n	8003466 <sin+0x2a>
 80034b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80034b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80034b8:	f000 f806 	bl	80034c8 <__kernel_cos>
 80034bc:	e7f5      	b.n	80034aa <sin+0x6e>
 80034be:	bf00      	nop
 80034c0:	3fe921fb 	.word	0x3fe921fb
 80034c4:	7fefffff 	.word	0x7fefffff

080034c8 <__kernel_cos>:
 80034c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034cc:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 80034d0:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 80034d4:	4680      	mov	r8, r0
 80034d6:	4689      	mov	r9, r1
 80034d8:	e9cd 2300 	strd	r2, r3, [sp]
 80034dc:	d204      	bcs.n	80034e8 <__kernel_cos+0x20>
 80034de:	f7fd f9a5 	bl	800082c <__aeabi_d2iz>
 80034e2:	2800      	cmp	r0, #0
 80034e4:	f000 8086 	beq.w	80035f4 <__kernel_cos+0x12c>
 80034e8:	4642      	mov	r2, r8
 80034ea:	464b      	mov	r3, r9
 80034ec:	4640      	mov	r0, r8
 80034ee:	4649      	mov	r1, r9
 80034f0:	f7fc fe2e 	bl	8000150 <__aeabi_dmul>
 80034f4:	2200      	movs	r2, #0
 80034f6:	4b4e      	ldr	r3, [pc, #312]	@ (8003630 <__kernel_cos+0x168>)
 80034f8:	4604      	mov	r4, r0
 80034fa:	460d      	mov	r5, r1
 80034fc:	f7fc fe28 	bl	8000150 <__aeabi_dmul>
 8003500:	a33f      	add	r3, pc, #252	@ (adr r3, 8003600 <__kernel_cos+0x138>)
 8003502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003506:	4682      	mov	sl, r0
 8003508:	468b      	mov	fp, r1
 800350a:	4620      	mov	r0, r4
 800350c:	4629      	mov	r1, r5
 800350e:	f7fc fe1f 	bl	8000150 <__aeabi_dmul>
 8003512:	a33d      	add	r3, pc, #244	@ (adr r3, 8003608 <__kernel_cos+0x140>)
 8003514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003518:	f7fc ff4a 	bl	80003b0 <__adddf3>
 800351c:	4622      	mov	r2, r4
 800351e:	462b      	mov	r3, r5
 8003520:	f7fc fe16 	bl	8000150 <__aeabi_dmul>
 8003524:	a33a      	add	r3, pc, #232	@ (adr r3, 8003610 <__kernel_cos+0x148>)
 8003526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352a:	f7fc ff3f 	bl	80003ac <__aeabi_dsub>
 800352e:	4622      	mov	r2, r4
 8003530:	462b      	mov	r3, r5
 8003532:	f7fc fe0d 	bl	8000150 <__aeabi_dmul>
 8003536:	a338      	add	r3, pc, #224	@ (adr r3, 8003618 <__kernel_cos+0x150>)
 8003538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353c:	f7fc ff38 	bl	80003b0 <__adddf3>
 8003540:	4622      	mov	r2, r4
 8003542:	462b      	mov	r3, r5
 8003544:	f7fc fe04 	bl	8000150 <__aeabi_dmul>
 8003548:	a335      	add	r3, pc, #212	@ (adr r3, 8003620 <__kernel_cos+0x158>)
 800354a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354e:	f7fc ff2d 	bl	80003ac <__aeabi_dsub>
 8003552:	4622      	mov	r2, r4
 8003554:	462b      	mov	r3, r5
 8003556:	f7fc fdfb 	bl	8000150 <__aeabi_dmul>
 800355a:	a333      	add	r3, pc, #204	@ (adr r3, 8003628 <__kernel_cos+0x160>)
 800355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003560:	f7fc ff26 	bl	80003b0 <__adddf3>
 8003564:	4622      	mov	r2, r4
 8003566:	462b      	mov	r3, r5
 8003568:	f7fc fdf2 	bl	8000150 <__aeabi_dmul>
 800356c:	4622      	mov	r2, r4
 800356e:	462b      	mov	r3, r5
 8003570:	f7fc fdee 	bl	8000150 <__aeabi_dmul>
 8003574:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003578:	4604      	mov	r4, r0
 800357a:	460d      	mov	r5, r1
 800357c:	4640      	mov	r0, r8
 800357e:	4649      	mov	r1, r9
 8003580:	f7fc fde6 	bl	8000150 <__aeabi_dmul>
 8003584:	460b      	mov	r3, r1
 8003586:	4602      	mov	r2, r0
 8003588:	4629      	mov	r1, r5
 800358a:	4620      	mov	r0, r4
 800358c:	f7fc ff0e 	bl	80003ac <__aeabi_dsub>
 8003590:	4b28      	ldr	r3, [pc, #160]	@ (8003634 <__kernel_cos+0x16c>)
 8003592:	4680      	mov	r8, r0
 8003594:	429e      	cmp	r6, r3
 8003596:	4689      	mov	r9, r1
 8003598:	d80e      	bhi.n	80035b8 <__kernel_cos+0xf0>
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	4650      	mov	r0, sl
 80035a0:	4659      	mov	r1, fp
 80035a2:	f7fc ff03 	bl	80003ac <__aeabi_dsub>
 80035a6:	4602      	mov	r2, r0
 80035a8:	2000      	movs	r0, #0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4922      	ldr	r1, [pc, #136]	@ (8003638 <__kernel_cos+0x170>)
 80035ae:	f7fc fefd 	bl	80003ac <__aeabi_dsub>
 80035b2:	b003      	add	sp, #12
 80035b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035b8:	2400      	movs	r4, #0
 80035ba:	4b20      	ldr	r3, [pc, #128]	@ (800363c <__kernel_cos+0x174>)
 80035bc:	4622      	mov	r2, r4
 80035be:	429e      	cmp	r6, r3
 80035c0:	bf8c      	ite	hi
 80035c2:	4d1f      	ldrhi	r5, [pc, #124]	@ (8003640 <__kernel_cos+0x178>)
 80035c4:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 80035c8:	462b      	mov	r3, r5
 80035ca:	2000      	movs	r0, #0
 80035cc:	491a      	ldr	r1, [pc, #104]	@ (8003638 <__kernel_cos+0x170>)
 80035ce:	f7fc feed 	bl	80003ac <__aeabi_dsub>
 80035d2:	4622      	mov	r2, r4
 80035d4:	4606      	mov	r6, r0
 80035d6:	460f      	mov	r7, r1
 80035d8:	462b      	mov	r3, r5
 80035da:	4650      	mov	r0, sl
 80035dc:	4659      	mov	r1, fp
 80035de:	f7fc fee5 	bl	80003ac <__aeabi_dsub>
 80035e2:	4642      	mov	r2, r8
 80035e4:	464b      	mov	r3, r9
 80035e6:	f7fc fee1 	bl	80003ac <__aeabi_dsub>
 80035ea:	4602      	mov	r2, r0
 80035ec:	460b      	mov	r3, r1
 80035ee:	4630      	mov	r0, r6
 80035f0:	4639      	mov	r1, r7
 80035f2:	e7dc      	b.n	80035ae <__kernel_cos+0xe6>
 80035f4:	2000      	movs	r0, #0
 80035f6:	4910      	ldr	r1, [pc, #64]	@ (8003638 <__kernel_cos+0x170>)
 80035f8:	e7db      	b.n	80035b2 <__kernel_cos+0xea>
 80035fa:	bf00      	nop
 80035fc:	f3af 8000 	nop.w
 8003600:	be8838d4 	.word	0xbe8838d4
 8003604:	bda8fae9 	.word	0xbda8fae9
 8003608:	bdb4b1c4 	.word	0xbdb4b1c4
 800360c:	3e21ee9e 	.word	0x3e21ee9e
 8003610:	809c52ad 	.word	0x809c52ad
 8003614:	3e927e4f 	.word	0x3e927e4f
 8003618:	19cb1590 	.word	0x19cb1590
 800361c:	3efa01a0 	.word	0x3efa01a0
 8003620:	16c15177 	.word	0x16c15177
 8003624:	3f56c16c 	.word	0x3f56c16c
 8003628:	5555554c 	.word	0x5555554c
 800362c:	3fa55555 	.word	0x3fa55555
 8003630:	3fe00000 	.word	0x3fe00000
 8003634:	3fd33332 	.word	0x3fd33332
 8003638:	3ff00000 	.word	0x3ff00000
 800363c:	3fe90000 	.word	0x3fe90000
 8003640:	3fd20000 	.word	0x3fd20000
 8003644:	00000000 	.word	0x00000000

08003648 <__kernel_sin>:
 8003648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800364c:	461f      	mov	r7, r3
 800364e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003652:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8003656:	4604      	mov	r4, r0
 8003658:	460d      	mov	r5, r1
 800365a:	4616      	mov	r6, r2
 800365c:	b085      	sub	sp, #20
 800365e:	d203      	bcs.n	8003668 <__kernel_sin+0x20>
 8003660:	f7fd f8e4 	bl	800082c <__aeabi_d2iz>
 8003664:	2800      	cmp	r0, #0
 8003666:	d051      	beq.n	800370c <__kernel_sin+0xc4>
 8003668:	4622      	mov	r2, r4
 800366a:	462b      	mov	r3, r5
 800366c:	4620      	mov	r0, r4
 800366e:	4629      	mov	r1, r5
 8003670:	f7fc fd6e 	bl	8000150 <__aeabi_dmul>
 8003674:	4682      	mov	sl, r0
 8003676:	468b      	mov	fp, r1
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4620      	mov	r0, r4
 800367e:	4629      	mov	r1, r5
 8003680:	f7fc fd66 	bl	8000150 <__aeabi_dmul>
 8003684:	a33e      	add	r3, pc, #248	@ (adr r3, 8003780 <__kernel_sin+0x138>)
 8003686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368a:	4680      	mov	r8, r0
 800368c:	4689      	mov	r9, r1
 800368e:	4650      	mov	r0, sl
 8003690:	4659      	mov	r1, fp
 8003692:	f7fc fd5d 	bl	8000150 <__aeabi_dmul>
 8003696:	a33c      	add	r3, pc, #240	@ (adr r3, 8003788 <__kernel_sin+0x140>)
 8003698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369c:	f7fc fe86 	bl	80003ac <__aeabi_dsub>
 80036a0:	4652      	mov	r2, sl
 80036a2:	465b      	mov	r3, fp
 80036a4:	f7fc fd54 	bl	8000150 <__aeabi_dmul>
 80036a8:	a339      	add	r3, pc, #228	@ (adr r3, 8003790 <__kernel_sin+0x148>)
 80036aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ae:	f7fc fe7f 	bl	80003b0 <__adddf3>
 80036b2:	4652      	mov	r2, sl
 80036b4:	465b      	mov	r3, fp
 80036b6:	f7fc fd4b 	bl	8000150 <__aeabi_dmul>
 80036ba:	a337      	add	r3, pc, #220	@ (adr r3, 8003798 <__kernel_sin+0x150>)
 80036bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c0:	f7fc fe74 	bl	80003ac <__aeabi_dsub>
 80036c4:	4652      	mov	r2, sl
 80036c6:	465b      	mov	r3, fp
 80036c8:	f7fc fd42 	bl	8000150 <__aeabi_dmul>
 80036cc:	a334      	add	r3, pc, #208	@ (adr r3, 80037a0 <__kernel_sin+0x158>)
 80036ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d2:	f7fc fe6d 	bl	80003b0 <__adddf3>
 80036d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80036d8:	e9cd 0100 	strd	r0, r1, [sp]
 80036dc:	b9db      	cbnz	r3, 8003716 <__kernel_sin+0xce>
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	4650      	mov	r0, sl
 80036e4:	4659      	mov	r1, fp
 80036e6:	f7fc fd33 	bl	8000150 <__aeabi_dmul>
 80036ea:	a32f      	add	r3, pc, #188	@ (adr r3, 80037a8 <__kernel_sin+0x160>)
 80036ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f0:	f7fc fe5c 	bl	80003ac <__aeabi_dsub>
 80036f4:	4642      	mov	r2, r8
 80036f6:	464b      	mov	r3, r9
 80036f8:	f7fc fd2a 	bl	8000150 <__aeabi_dmul>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4620      	mov	r0, r4
 8003702:	4629      	mov	r1, r5
 8003704:	f7fc fe54 	bl	80003b0 <__adddf3>
 8003708:	4604      	mov	r4, r0
 800370a:	460d      	mov	r5, r1
 800370c:	4620      	mov	r0, r4
 800370e:	4629      	mov	r1, r5
 8003710:	b005      	add	sp, #20
 8003712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003716:	2200      	movs	r2, #0
 8003718:	4630      	mov	r0, r6
 800371a:	4639      	mov	r1, r7
 800371c:	4b24      	ldr	r3, [pc, #144]	@ (80037b0 <__kernel_sin+0x168>)
 800371e:	f7fc fd17 	bl	8000150 <__aeabi_dmul>
 8003722:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003726:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800372a:	4640      	mov	r0, r8
 800372c:	4649      	mov	r1, r9
 800372e:	f7fc fd0f 	bl	8000150 <__aeabi_dmul>
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800373a:	f7fc fe37 	bl	80003ac <__aeabi_dsub>
 800373e:	4652      	mov	r2, sl
 8003740:	465b      	mov	r3, fp
 8003742:	f7fc fd05 	bl	8000150 <__aeabi_dmul>
 8003746:	4632      	mov	r2, r6
 8003748:	463b      	mov	r3, r7
 800374a:	f7fc fe2f 	bl	80003ac <__aeabi_dsub>
 800374e:	a316      	add	r3, pc, #88	@ (adr r3, 80037a8 <__kernel_sin+0x160>)
 8003750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003754:	4606      	mov	r6, r0
 8003756:	460f      	mov	r7, r1
 8003758:	4640      	mov	r0, r8
 800375a:	4649      	mov	r1, r9
 800375c:	f7fc fcf8 	bl	8000150 <__aeabi_dmul>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4630      	mov	r0, r6
 8003766:	4639      	mov	r1, r7
 8003768:	f7fc fe22 	bl	80003b0 <__adddf3>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4620      	mov	r0, r4
 8003772:	4629      	mov	r1, r5
 8003774:	f7fc fe1a 	bl	80003ac <__aeabi_dsub>
 8003778:	e7c6      	b.n	8003708 <__kernel_sin+0xc0>
 800377a:	bf00      	nop
 800377c:	f3af 8000 	nop.w
 8003780:	5acfd57c 	.word	0x5acfd57c
 8003784:	3de5d93a 	.word	0x3de5d93a
 8003788:	8a2b9ceb 	.word	0x8a2b9ceb
 800378c:	3e5ae5e6 	.word	0x3e5ae5e6
 8003790:	57b1fe7d 	.word	0x57b1fe7d
 8003794:	3ec71de3 	.word	0x3ec71de3
 8003798:	19c161d5 	.word	0x19c161d5
 800379c:	3f2a01a0 	.word	0x3f2a01a0
 80037a0:	1110f8a6 	.word	0x1110f8a6
 80037a4:	3f811111 	.word	0x3f811111
 80037a8:	55555549 	.word	0x55555549
 80037ac:	3fc55555 	.word	0x3fc55555
 80037b0:	3fe00000 	.word	0x3fe00000
 80037b4:	00000000 	.word	0x00000000

080037b8 <__ieee754_rem_pio2>:
 80037b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037bc:	4bc4      	ldr	r3, [pc, #784]	@ (8003ad0 <__ieee754_rem_pio2+0x318>)
 80037be:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 80037c2:	b08d      	sub	sp, #52	@ 0x34
 80037c4:	4598      	cmp	r8, r3
 80037c6:	4606      	mov	r6, r0
 80037c8:	460f      	mov	r7, r1
 80037ca:	4614      	mov	r4, r2
 80037cc:	9104      	str	r1, [sp, #16]
 80037ce:	d807      	bhi.n	80037e0 <__ieee754_rem_pio2+0x28>
 80037d0:	e9c2 6700 	strd	r6, r7, [r2]
 80037d4:	2300      	movs	r3, #0
 80037d6:	2200      	movs	r2, #0
 80037d8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80037dc:	2500      	movs	r5, #0
 80037de:	e026      	b.n	800382e <__ieee754_rem_pio2+0x76>
 80037e0:	4bbc      	ldr	r3, [pc, #752]	@ (8003ad4 <__ieee754_rem_pio2+0x31c>)
 80037e2:	4598      	cmp	r8, r3
 80037e4:	d876      	bhi.n	80038d4 <__ieee754_rem_pio2+0x11c>
 80037e6:	9b04      	ldr	r3, [sp, #16]
 80037e8:	4dbb      	ldr	r5, [pc, #748]	@ (8003ad8 <__ieee754_rem_pio2+0x320>)
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	a3aa      	add	r3, pc, #680	@ (adr r3, 8003a98 <__ieee754_rem_pio2+0x2e0>)
 80037ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f2:	dd38      	ble.n	8003866 <__ieee754_rem_pio2+0xae>
 80037f4:	f7fc fdda 	bl	80003ac <__aeabi_dsub>
 80037f8:	45a8      	cmp	r8, r5
 80037fa:	4606      	mov	r6, r0
 80037fc:	460f      	mov	r7, r1
 80037fe:	d01a      	beq.n	8003836 <__ieee754_rem_pio2+0x7e>
 8003800:	a3a7      	add	r3, pc, #668	@ (adr r3, 8003aa0 <__ieee754_rem_pio2+0x2e8>)
 8003802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003806:	f7fc fdd1 	bl	80003ac <__aeabi_dsub>
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	4680      	mov	r8, r0
 8003810:	4689      	mov	r9, r1
 8003812:	4630      	mov	r0, r6
 8003814:	4639      	mov	r1, r7
 8003816:	f7fc fdc9 	bl	80003ac <__aeabi_dsub>
 800381a:	a3a1      	add	r3, pc, #644	@ (adr r3, 8003aa0 <__ieee754_rem_pio2+0x2e8>)
 800381c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003820:	f7fc fdc4 	bl	80003ac <__aeabi_dsub>
 8003824:	2501      	movs	r5, #1
 8003826:	e9c4 8900 	strd	r8, r9, [r4]
 800382a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800382e:	4628      	mov	r0, r5
 8003830:	b00d      	add	sp, #52	@ 0x34
 8003832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003836:	a39c      	add	r3, pc, #624	@ (adr r3, 8003aa8 <__ieee754_rem_pio2+0x2f0>)
 8003838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383c:	f7fc fdb6 	bl	80003ac <__aeabi_dsub>
 8003840:	a39b      	add	r3, pc, #620	@ (adr r3, 8003ab0 <__ieee754_rem_pio2+0x2f8>)
 8003842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003846:	4606      	mov	r6, r0
 8003848:	460f      	mov	r7, r1
 800384a:	f7fc fdaf 	bl	80003ac <__aeabi_dsub>
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	4680      	mov	r8, r0
 8003854:	4689      	mov	r9, r1
 8003856:	4630      	mov	r0, r6
 8003858:	4639      	mov	r1, r7
 800385a:	f7fc fda7 	bl	80003ac <__aeabi_dsub>
 800385e:	a394      	add	r3, pc, #592	@ (adr r3, 8003ab0 <__ieee754_rem_pio2+0x2f8>)
 8003860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003864:	e7dc      	b.n	8003820 <__ieee754_rem_pio2+0x68>
 8003866:	f7fc fda3 	bl	80003b0 <__adddf3>
 800386a:	45a8      	cmp	r8, r5
 800386c:	4606      	mov	r6, r0
 800386e:	460f      	mov	r7, r1
 8003870:	d018      	beq.n	80038a4 <__ieee754_rem_pio2+0xec>
 8003872:	a38b      	add	r3, pc, #556	@ (adr r3, 8003aa0 <__ieee754_rem_pio2+0x2e8>)
 8003874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003878:	f7fc fd9a 	bl	80003b0 <__adddf3>
 800387c:	4602      	mov	r2, r0
 800387e:	460b      	mov	r3, r1
 8003880:	4680      	mov	r8, r0
 8003882:	4689      	mov	r9, r1
 8003884:	4630      	mov	r0, r6
 8003886:	4639      	mov	r1, r7
 8003888:	f7fc fd90 	bl	80003ac <__aeabi_dsub>
 800388c:	a384      	add	r3, pc, #528	@ (adr r3, 8003aa0 <__ieee754_rem_pio2+0x2e8>)
 800388e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003892:	f7fc fd8d 	bl	80003b0 <__adddf3>
 8003896:	f04f 35ff 	mov.w	r5, #4294967295
 800389a:	e9c4 8900 	strd	r8, r9, [r4]
 800389e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80038a2:	e7c4      	b.n	800382e <__ieee754_rem_pio2+0x76>
 80038a4:	a380      	add	r3, pc, #512	@ (adr r3, 8003aa8 <__ieee754_rem_pio2+0x2f0>)
 80038a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038aa:	f7fc fd81 	bl	80003b0 <__adddf3>
 80038ae:	a380      	add	r3, pc, #512	@ (adr r3, 8003ab0 <__ieee754_rem_pio2+0x2f8>)
 80038b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b4:	4606      	mov	r6, r0
 80038b6:	460f      	mov	r7, r1
 80038b8:	f7fc fd7a 	bl	80003b0 <__adddf3>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4680      	mov	r8, r0
 80038c2:	4689      	mov	r9, r1
 80038c4:	4630      	mov	r0, r6
 80038c6:	4639      	mov	r1, r7
 80038c8:	f7fc fd70 	bl	80003ac <__aeabi_dsub>
 80038cc:	a378      	add	r3, pc, #480	@ (adr r3, 8003ab0 <__ieee754_rem_pio2+0x2f8>)
 80038ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d2:	e7de      	b.n	8003892 <__ieee754_rem_pio2+0xda>
 80038d4:	4b81      	ldr	r3, [pc, #516]	@ (8003adc <__ieee754_rem_pio2+0x324>)
 80038d6:	4598      	cmp	r8, r3
 80038d8:	f200 80cf 	bhi.w	8003a7a <__ieee754_rem_pio2+0x2c2>
 80038dc:	f000 f962 	bl	8003ba4 <fabs>
 80038e0:	a375      	add	r3, pc, #468	@ (adr r3, 8003ab8 <__ieee754_rem_pio2+0x300>)
 80038e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e6:	4606      	mov	r6, r0
 80038e8:	460f      	mov	r7, r1
 80038ea:	f7fc fc31 	bl	8000150 <__aeabi_dmul>
 80038ee:	2200      	movs	r2, #0
 80038f0:	4b7b      	ldr	r3, [pc, #492]	@ (8003ae0 <__ieee754_rem_pio2+0x328>)
 80038f2:	f7fc fd5d 	bl	80003b0 <__adddf3>
 80038f6:	f7fc ff99 	bl	800082c <__aeabi_d2iz>
 80038fa:	4605      	mov	r5, r0
 80038fc:	f7fc fea4 	bl	8000648 <__aeabi_i2d>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003908:	a363      	add	r3, pc, #396	@ (adr r3, 8003a98 <__ieee754_rem_pio2+0x2e0>)
 800390a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390e:	f7fc fc1f 	bl	8000150 <__aeabi_dmul>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4630      	mov	r0, r6
 8003918:	4639      	mov	r1, r7
 800391a:	f7fc fd47 	bl	80003ac <__aeabi_dsub>
 800391e:	a360      	add	r3, pc, #384	@ (adr r3, 8003aa0 <__ieee754_rem_pio2+0x2e8>)
 8003920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003924:	4682      	mov	sl, r0
 8003926:	468b      	mov	fp, r1
 8003928:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800392c:	f7fc fc10 	bl	8000150 <__aeabi_dmul>
 8003930:	2d1f      	cmp	r5, #31
 8003932:	4606      	mov	r6, r0
 8003934:	460f      	mov	r7, r1
 8003936:	dc0c      	bgt.n	8003952 <__ieee754_rem_pio2+0x19a>
 8003938:	4b6a      	ldr	r3, [pc, #424]	@ (8003ae4 <__ieee754_rem_pio2+0x32c>)
 800393a:	1e6a      	subs	r2, r5, #1
 800393c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003940:	4543      	cmp	r3, r8
 8003942:	d006      	beq.n	8003952 <__ieee754_rem_pio2+0x19a>
 8003944:	4632      	mov	r2, r6
 8003946:	463b      	mov	r3, r7
 8003948:	4650      	mov	r0, sl
 800394a:	4659      	mov	r1, fp
 800394c:	f7fc fd2e 	bl	80003ac <__aeabi_dsub>
 8003950:	e00e      	b.n	8003970 <__ieee754_rem_pio2+0x1b8>
 8003952:	463b      	mov	r3, r7
 8003954:	4632      	mov	r2, r6
 8003956:	4650      	mov	r0, sl
 8003958:	4659      	mov	r1, fp
 800395a:	f7fc fd27 	bl	80003ac <__aeabi_dsub>
 800395e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003962:	9305      	str	r3, [sp, #20]
 8003964:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003968:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800396c:	2b10      	cmp	r3, #16
 800396e:	dc02      	bgt.n	8003976 <__ieee754_rem_pio2+0x1be>
 8003970:	e9c4 0100 	strd	r0, r1, [r4]
 8003974:	e039      	b.n	80039ea <__ieee754_rem_pio2+0x232>
 8003976:	a34c      	add	r3, pc, #304	@ (adr r3, 8003aa8 <__ieee754_rem_pio2+0x2f0>)
 8003978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003980:	f7fc fbe6 	bl	8000150 <__aeabi_dmul>
 8003984:	4606      	mov	r6, r0
 8003986:	460f      	mov	r7, r1
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4650      	mov	r0, sl
 800398e:	4659      	mov	r1, fp
 8003990:	f7fc fd0c 	bl	80003ac <__aeabi_dsub>
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	4680      	mov	r8, r0
 800399a:	4689      	mov	r9, r1
 800399c:	4650      	mov	r0, sl
 800399e:	4659      	mov	r1, fp
 80039a0:	f7fc fd04 	bl	80003ac <__aeabi_dsub>
 80039a4:	4632      	mov	r2, r6
 80039a6:	463b      	mov	r3, r7
 80039a8:	f7fc fd00 	bl	80003ac <__aeabi_dsub>
 80039ac:	a340      	add	r3, pc, #256	@ (adr r3, 8003ab0 <__ieee754_rem_pio2+0x2f8>)
 80039ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b2:	4606      	mov	r6, r0
 80039b4:	460f      	mov	r7, r1
 80039b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039ba:	f7fc fbc9 	bl	8000150 <__aeabi_dmul>
 80039be:	4632      	mov	r2, r6
 80039c0:	463b      	mov	r3, r7
 80039c2:	f7fc fcf3 	bl	80003ac <__aeabi_dsub>
 80039c6:	4602      	mov	r2, r0
 80039c8:	460b      	mov	r3, r1
 80039ca:	4606      	mov	r6, r0
 80039cc:	460f      	mov	r7, r1
 80039ce:	4640      	mov	r0, r8
 80039d0:	4649      	mov	r1, r9
 80039d2:	f7fc fceb 	bl	80003ac <__aeabi_dsub>
 80039d6:	9a05      	ldr	r2, [sp, #20]
 80039d8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b31      	cmp	r3, #49	@ 0x31
 80039e0:	dc20      	bgt.n	8003a24 <__ieee754_rem_pio2+0x26c>
 80039e2:	46c2      	mov	sl, r8
 80039e4:	46cb      	mov	fp, r9
 80039e6:	e9c4 0100 	strd	r0, r1, [r4]
 80039ea:	e9d4 8900 	ldrd	r8, r9, [r4]
 80039ee:	4650      	mov	r0, sl
 80039f0:	4642      	mov	r2, r8
 80039f2:	464b      	mov	r3, r9
 80039f4:	4659      	mov	r1, fp
 80039f6:	f7fc fcd9 	bl	80003ac <__aeabi_dsub>
 80039fa:	463b      	mov	r3, r7
 80039fc:	4632      	mov	r2, r6
 80039fe:	f7fc fcd5 	bl	80003ac <__aeabi_dsub>
 8003a02:	9b04      	ldr	r3, [sp, #16]
 8003a04:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f6bf af10 	bge.w	800382e <__ieee754_rem_pio2+0x76>
 8003a0e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8003a12:	6063      	str	r3, [r4, #4]
 8003a14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003a18:	f8c4 8000 	str.w	r8, [r4]
 8003a1c:	60a0      	str	r0, [r4, #8]
 8003a1e:	60e3      	str	r3, [r4, #12]
 8003a20:	426d      	negs	r5, r5
 8003a22:	e704      	b.n	800382e <__ieee754_rem_pio2+0x76>
 8003a24:	a326      	add	r3, pc, #152	@ (adr r3, 8003ac0 <__ieee754_rem_pio2+0x308>)
 8003a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a2e:	f7fc fb8f 	bl	8000150 <__aeabi_dmul>
 8003a32:	4606      	mov	r6, r0
 8003a34:	460f      	mov	r7, r1
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4640      	mov	r0, r8
 8003a3c:	4649      	mov	r1, r9
 8003a3e:	f7fc fcb5 	bl	80003ac <__aeabi_dsub>
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	4682      	mov	sl, r0
 8003a48:	468b      	mov	fp, r1
 8003a4a:	4640      	mov	r0, r8
 8003a4c:	4649      	mov	r1, r9
 8003a4e:	f7fc fcad 	bl	80003ac <__aeabi_dsub>
 8003a52:	4632      	mov	r2, r6
 8003a54:	463b      	mov	r3, r7
 8003a56:	f7fc fca9 	bl	80003ac <__aeabi_dsub>
 8003a5a:	a31b      	add	r3, pc, #108	@ (adr r3, 8003ac8 <__ieee754_rem_pio2+0x310>)
 8003a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a60:	4606      	mov	r6, r0
 8003a62:	460f      	mov	r7, r1
 8003a64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a68:	f7fc fb72 	bl	8000150 <__aeabi_dmul>
 8003a6c:	4632      	mov	r2, r6
 8003a6e:	463b      	mov	r3, r7
 8003a70:	f7fc fc9c 	bl	80003ac <__aeabi_dsub>
 8003a74:	4606      	mov	r6, r0
 8003a76:	460f      	mov	r7, r1
 8003a78:	e764      	b.n	8003944 <__ieee754_rem_pio2+0x18c>
 8003a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ae8 <__ieee754_rem_pio2+0x330>)
 8003a7c:	4598      	cmp	r8, r3
 8003a7e:	d935      	bls.n	8003aec <__ieee754_rem_pio2+0x334>
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	f7fc fc92 	bl	80003ac <__aeabi_dsub>
 8003a88:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003a8c:	e9c4 0100 	strd	r0, r1, [r4]
 8003a90:	e6a4      	b.n	80037dc <__ieee754_rem_pio2+0x24>
 8003a92:	bf00      	nop
 8003a94:	f3af 8000 	nop.w
 8003a98:	54400000 	.word	0x54400000
 8003a9c:	3ff921fb 	.word	0x3ff921fb
 8003aa0:	1a626331 	.word	0x1a626331
 8003aa4:	3dd0b461 	.word	0x3dd0b461
 8003aa8:	1a600000 	.word	0x1a600000
 8003aac:	3dd0b461 	.word	0x3dd0b461
 8003ab0:	2e037073 	.word	0x2e037073
 8003ab4:	3ba3198a 	.word	0x3ba3198a
 8003ab8:	6dc9c883 	.word	0x6dc9c883
 8003abc:	3fe45f30 	.word	0x3fe45f30
 8003ac0:	2e000000 	.word	0x2e000000
 8003ac4:	3ba3198a 	.word	0x3ba3198a
 8003ac8:	252049c1 	.word	0x252049c1
 8003acc:	397b839a 	.word	0x397b839a
 8003ad0:	3fe921fb 	.word	0x3fe921fb
 8003ad4:	4002d97b 	.word	0x4002d97b
 8003ad8:	3ff921fb 	.word	0x3ff921fb
 8003adc:	413921fb 	.word	0x413921fb
 8003ae0:	3fe00000 	.word	0x3fe00000
 8003ae4:	08004424 	.word	0x08004424
 8003ae8:	7fefffff 	.word	0x7fefffff
 8003aec:	ea4f 5528 	mov.w	r5, r8, asr #20
 8003af0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8003af4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8003af8:	460f      	mov	r7, r1
 8003afa:	f7fc fe97 	bl	800082c <__aeabi_d2iz>
 8003afe:	f7fc fda3 	bl	8000648 <__aeabi_i2d>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	4630      	mov	r0, r6
 8003b08:	4639      	mov	r1, r7
 8003b0a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003b0e:	f7fc fc4d 	bl	80003ac <__aeabi_dsub>
 8003b12:	2200      	movs	r2, #0
 8003b14:	4b21      	ldr	r3, [pc, #132]	@ (8003b9c <__ieee754_rem_pio2+0x3e4>)
 8003b16:	f7fc fb1b 	bl	8000150 <__aeabi_dmul>
 8003b1a:	460f      	mov	r7, r1
 8003b1c:	4606      	mov	r6, r0
 8003b1e:	f7fc fe85 	bl	800082c <__aeabi_d2iz>
 8003b22:	f7fc fd91 	bl	8000648 <__aeabi_i2d>
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4630      	mov	r0, r6
 8003b2c:	4639      	mov	r1, r7
 8003b2e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003b32:	f7fc fc3b 	bl	80003ac <__aeabi_dsub>
 8003b36:	2200      	movs	r2, #0
 8003b38:	4b18      	ldr	r3, [pc, #96]	@ (8003b9c <__ieee754_rem_pio2+0x3e4>)
 8003b3a:	f7fc fb09 	bl	8000150 <__aeabi_dmul>
 8003b3e:	f04f 0803 	mov.w	r8, #3
 8003b42:	2600      	movs	r6, #0
 8003b44:	2700      	movs	r7, #0
 8003b46:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8003b4a:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8003b4e:	4632      	mov	r2, r6
 8003b50:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8003b54:	463b      	mov	r3, r7
 8003b56:	46c2      	mov	sl, r8
 8003b58:	f108 38ff 	add.w	r8, r8, #4294967295
 8003b5c:	f7fc fe34 	bl	80007c8 <__aeabi_dcmpeq>
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d1f4      	bne.n	8003b4e <__ieee754_rem_pio2+0x396>
 8003b64:	4b0e      	ldr	r3, [pc, #56]	@ (8003ba0 <__ieee754_rem_pio2+0x3e8>)
 8003b66:	462a      	mov	r2, r5
 8003b68:	9301      	str	r3, [sp, #4]
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	a806      	add	r0, sp, #24
 8003b72:	4653      	mov	r3, sl
 8003b74:	f000 f81a 	bl	8003bac <__kernel_rem_pio2>
 8003b78:	9b04      	ldr	r3, [sp, #16]
 8003b7a:	4605      	mov	r5, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f6bf ae56 	bge.w	800382e <__ieee754_rem_pio2+0x76>
 8003b82:	e9d4 2100 	ldrd	r2, r1, [r4]
 8003b86:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003b8a:	e9c4 2300 	strd	r2, r3, [r4]
 8003b8e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8003b92:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003b96:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003b9a:	e741      	b.n	8003a20 <__ieee754_rem_pio2+0x268>
 8003b9c:	41700000 	.word	0x41700000
 8003ba0:	080044a4 	.word	0x080044a4

08003ba4 <fabs>:
 8003ba4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003ba8:	4619      	mov	r1, r3
 8003baa:	4770      	bx	lr

08003bac <__kernel_rem_pio2>:
 8003bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8003bb4:	9308      	str	r3, [sp, #32]
 8003bb6:	9104      	str	r1, [sp, #16]
 8003bb8:	4bb6      	ldr	r3, [pc, #728]	@ (8003e94 <__kernel_rem_pio2+0x2e8>)
 8003bba:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 8003bbc:	f112 0f14 	cmn.w	r2, #20
 8003bc0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003bc4:	bfa8      	it	ge
 8003bc6:	1ed4      	subge	r4, r2, #3
 8003bc8:	9302      	str	r3, [sp, #8]
 8003bca:	9b08      	ldr	r3, [sp, #32]
 8003bcc:	bfb8      	it	lt
 8003bce:	2400      	movlt	r4, #0
 8003bd0:	f103 33ff 	add.w	r3, r3, #4294967295
 8003bd4:	9306      	str	r3, [sp, #24]
 8003bd6:	bfa4      	itt	ge
 8003bd8:	2318      	movge	r3, #24
 8003bda:	fb94 f4f3 	sdivge	r4, r4, r3
 8003bde:	f06f 0317 	mvn.w	r3, #23
 8003be2:	fb04 3303 	mla	r3, r4, r3, r3
 8003be6:	eb03 0a02 	add.w	sl, r3, r2
 8003bea:	9a06      	ldr	r2, [sp, #24]
 8003bec:	9b02      	ldr	r3, [sp, #8]
 8003bee:	1aa7      	subs	r7, r4, r2
 8003bf0:	eb03 0802 	add.w	r8, r3, r2
 8003bf4:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8003bf6:	2500      	movs	r5, #0
 8003bf8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	2300      	movs	r3, #0
 8003c00:	9009      	str	r0, [sp, #36]	@ 0x24
 8003c02:	ae20      	add	r6, sp, #128	@ 0x80
 8003c04:	4545      	cmp	r5, r8
 8003c06:	dd14      	ble.n	8003c32 <__kernel_rem_pio2+0x86>
 8003c08:	f04f 0800 	mov.w	r8, #0
 8003c0c:	9a08      	ldr	r2, [sp, #32]
 8003c0e:	ab20      	add	r3, sp, #128	@ 0x80
 8003c10:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8003c14:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 8003c18:	9b02      	ldr	r3, [sp, #8]
 8003c1a:	4598      	cmp	r8, r3
 8003c1c:	dc35      	bgt.n	8003c8a <__kernel_rem_pio2+0xde>
 8003c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c20:	2200      	movs	r2, #0
 8003c22:	f1a3 0908 	sub.w	r9, r3, #8
 8003c26:	2300      	movs	r3, #0
 8003c28:	462f      	mov	r7, r5
 8003c2a:	2600      	movs	r6, #0
 8003c2c:	e9cd 2300 	strd	r2, r3, [sp]
 8003c30:	e01f      	b.n	8003c72 <__kernel_rem_pio2+0xc6>
 8003c32:	42ef      	cmn	r7, r5
 8003c34:	d40b      	bmi.n	8003c4e <__kernel_rem_pio2+0xa2>
 8003c36:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003c3a:	e9cd 2300 	strd	r2, r3, [sp]
 8003c3e:	f7fc fd03 	bl	8000648 <__aeabi_i2d>
 8003c42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c46:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003c4a:	3501      	adds	r5, #1
 8003c4c:	e7da      	b.n	8003c04 <__kernel_rem_pio2+0x58>
 8003c4e:	4610      	mov	r0, r2
 8003c50:	4619      	mov	r1, r3
 8003c52:	e7f8      	b.n	8003c46 <__kernel_rem_pio2+0x9a>
 8003c54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c58:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8003c5c:	f7fc fa78 	bl	8000150 <__aeabi_dmul>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003c68:	f7fc fba2 	bl	80003b0 <__adddf3>
 8003c6c:	e9cd 0100 	strd	r0, r1, [sp]
 8003c70:	3601      	adds	r6, #1
 8003c72:	9b06      	ldr	r3, [sp, #24]
 8003c74:	3f08      	subs	r7, #8
 8003c76:	429e      	cmp	r6, r3
 8003c78:	ddec      	ble.n	8003c54 <__kernel_rem_pio2+0xa8>
 8003c7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c7e:	f108 0801 	add.w	r8, r8, #1
 8003c82:	e8eb 2302 	strd	r2, r3, [fp], #8
 8003c86:	3508      	adds	r5, #8
 8003c88:	e7c6      	b.n	8003c18 <__kernel_rem_pio2+0x6c>
 8003c8a:	9b02      	ldr	r3, [sp, #8]
 8003c8c:	aa0c      	add	r2, sp, #48	@ 0x30
 8003c8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003c92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003c94:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8003c96:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003c9a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003c9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ca0:	ab98      	add	r3, sp, #608	@ 0x260
 8003ca2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003ca6:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 8003caa:	ab70      	add	r3, sp, #448	@ 0x1c0
 8003cac:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003cb0:	ae0c      	add	r6, sp, #48	@ 0x30
 8003cb2:	4698      	mov	r8, r3
 8003cb4:	46b1      	mov	r9, r6
 8003cb6:	465f      	mov	r7, fp
 8003cb8:	9307      	str	r3, [sp, #28]
 8003cba:	2f00      	cmp	r7, #0
 8003cbc:	f1a8 0808 	sub.w	r8, r8, #8
 8003cc0:	dc71      	bgt.n	8003da6 <__kernel_rem_pio2+0x1fa>
 8003cc2:	4652      	mov	r2, sl
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	f000 fa96 	bl	80041f8 <scalbn>
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8003cd2:	4604      	mov	r4, r0
 8003cd4:	460d      	mov	r5, r1
 8003cd6:	f7fc fa3b 	bl	8000150 <__aeabi_dmul>
 8003cda:	f000 fb05 	bl	80042e8 <floor>
 8003cde:	2200      	movs	r2, #0
 8003ce0:	4b6d      	ldr	r3, [pc, #436]	@ (8003e98 <__kernel_rem_pio2+0x2ec>)
 8003ce2:	f7fc fa35 	bl	8000150 <__aeabi_dmul>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4620      	mov	r0, r4
 8003cec:	4629      	mov	r1, r5
 8003cee:	f7fc fb5d 	bl	80003ac <__aeabi_dsub>
 8003cf2:	460d      	mov	r5, r1
 8003cf4:	4604      	mov	r4, r0
 8003cf6:	f7fc fd99 	bl	800082c <__aeabi_d2iz>
 8003cfa:	9005      	str	r0, [sp, #20]
 8003cfc:	f7fc fca4 	bl	8000648 <__aeabi_i2d>
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4620      	mov	r0, r4
 8003d06:	4629      	mov	r1, r5
 8003d08:	f7fc fb50 	bl	80003ac <__aeabi_dsub>
 8003d0c:	f1ba 0f00 	cmp.w	sl, #0
 8003d10:	4680      	mov	r8, r0
 8003d12:	4689      	mov	r9, r1
 8003d14:	dd6d      	ble.n	8003df2 <__kernel_rem_pio2+0x246>
 8003d16:	f10b 31ff 	add.w	r1, fp, #4294967295
 8003d1a:	ab0c      	add	r3, sp, #48	@ 0x30
 8003d1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003d20:	9c05      	ldr	r4, [sp, #20]
 8003d22:	f1ca 0018 	rsb	r0, sl, #24
 8003d26:	fa43 f200 	asr.w	r2, r3, r0
 8003d2a:	4414      	add	r4, r2
 8003d2c:	4082      	lsls	r2, r0
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	aa0c      	add	r2, sp, #48	@ 0x30
 8003d32:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8003d36:	f1ca 0217 	rsb	r2, sl, #23
 8003d3a:	9405      	str	r4, [sp, #20]
 8003d3c:	4113      	asrs	r3, r2
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	9b00      	ldr	r3, [sp, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	dd64      	ble.n	8003e10 <__kernel_rem_pio2+0x264>
 8003d46:	2200      	movs	r2, #0
 8003d48:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8003d4c:	4614      	mov	r4, r2
 8003d4e:	9b05      	ldr	r3, [sp, #20]
 8003d50:	3301      	adds	r3, #1
 8003d52:	9305      	str	r3, [sp, #20]
 8003d54:	4593      	cmp	fp, r2
 8003d56:	f300 80ab 	bgt.w	8003eb0 <__kernel_rem_pio2+0x304>
 8003d5a:	f1ba 0f00 	cmp.w	sl, #0
 8003d5e:	dd07      	ble.n	8003d70 <__kernel_rem_pio2+0x1c4>
 8003d60:	f1ba 0f01 	cmp.w	sl, #1
 8003d64:	f000 80b2 	beq.w	8003ecc <__kernel_rem_pio2+0x320>
 8003d68:	f1ba 0f02 	cmp.w	sl, #2
 8003d6c:	f000 80b9 	beq.w	8003ee2 <__kernel_rem_pio2+0x336>
 8003d70:	9b00      	ldr	r3, [sp, #0]
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d14c      	bne.n	8003e10 <__kernel_rem_pio2+0x264>
 8003d76:	4642      	mov	r2, r8
 8003d78:	464b      	mov	r3, r9
 8003d7a:	2000      	movs	r0, #0
 8003d7c:	4947      	ldr	r1, [pc, #284]	@ (8003e9c <__kernel_rem_pio2+0x2f0>)
 8003d7e:	f7fc fb15 	bl	80003ac <__aeabi_dsub>
 8003d82:	4680      	mov	r8, r0
 8003d84:	4689      	mov	r9, r1
 8003d86:	2c00      	cmp	r4, #0
 8003d88:	d042      	beq.n	8003e10 <__kernel_rem_pio2+0x264>
 8003d8a:	4652      	mov	r2, sl
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	4943      	ldr	r1, [pc, #268]	@ (8003e9c <__kernel_rem_pio2+0x2f0>)
 8003d90:	f000 fa32 	bl	80041f8 <scalbn>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4640      	mov	r0, r8
 8003d9a:	4649      	mov	r1, r9
 8003d9c:	f7fc fb06 	bl	80003ac <__aeabi_dsub>
 8003da0:	4680      	mov	r8, r0
 8003da2:	4689      	mov	r9, r1
 8003da4:	e034      	b.n	8003e10 <__kernel_rem_pio2+0x264>
 8003da6:	2200      	movs	r2, #0
 8003da8:	4b3d      	ldr	r3, [pc, #244]	@ (8003ea0 <__kernel_rem_pio2+0x2f4>)
 8003daa:	4620      	mov	r0, r4
 8003dac:	4629      	mov	r1, r5
 8003dae:	f7fc f9cf 	bl	8000150 <__aeabi_dmul>
 8003db2:	f7fc fd3b 	bl	800082c <__aeabi_d2iz>
 8003db6:	f7fc fc47 	bl	8000648 <__aeabi_i2d>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	e9cd 2300 	strd	r2, r3, [sp]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	4b37      	ldr	r3, [pc, #220]	@ (8003ea4 <__kernel_rem_pio2+0x2f8>)
 8003dc6:	f7fc f9c3 	bl	8000150 <__aeabi_dmul>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4620      	mov	r0, r4
 8003dd0:	4629      	mov	r1, r5
 8003dd2:	f7fc faeb 	bl	80003ac <__aeabi_dsub>
 8003dd6:	f7fc fd29 	bl	800082c <__aeabi_d2iz>
 8003dda:	e9d8 2300 	ldrd	r2, r3, [r8]
 8003dde:	f849 0b04 	str.w	r0, [r9], #4
 8003de2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003de6:	f7fc fae3 	bl	80003b0 <__adddf3>
 8003dea:	3f01      	subs	r7, #1
 8003dec:	4604      	mov	r4, r0
 8003dee:	460d      	mov	r5, r1
 8003df0:	e763      	b.n	8003cba <__kernel_rem_pio2+0x10e>
 8003df2:	d106      	bne.n	8003e02 <__kernel_rem_pio2+0x256>
 8003df4:	f10b 33ff 	add.w	r3, fp, #4294967295
 8003df8:	aa0c      	add	r2, sp, #48	@ 0x30
 8003dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dfe:	15db      	asrs	r3, r3, #23
 8003e00:	e79d      	b.n	8003d3e <__kernel_rem_pio2+0x192>
 8003e02:	2200      	movs	r2, #0
 8003e04:	4b28      	ldr	r3, [pc, #160]	@ (8003ea8 <__kernel_rem_pio2+0x2fc>)
 8003e06:	f7fc fcfd 	bl	8000804 <__aeabi_dcmpge>
 8003e0a:	2800      	cmp	r0, #0
 8003e0c:	d13f      	bne.n	8003e8e <__kernel_rem_pio2+0x2e2>
 8003e0e:	9000      	str	r0, [sp, #0]
 8003e10:	2200      	movs	r2, #0
 8003e12:	2300      	movs	r3, #0
 8003e14:	4640      	mov	r0, r8
 8003e16:	4649      	mov	r1, r9
 8003e18:	f7fc fcd6 	bl	80007c8 <__aeabi_dcmpeq>
 8003e1c:	2800      	cmp	r0, #0
 8003e1e:	f000 80af 	beq.w	8003f80 <__kernel_rem_pio2+0x3d4>
 8003e22:	2200      	movs	r2, #0
 8003e24:	f10b 33ff 	add.w	r3, fp, #4294967295
 8003e28:	9902      	ldr	r1, [sp, #8]
 8003e2a:	428b      	cmp	r3, r1
 8003e2c:	da61      	bge.n	8003ef2 <__kernel_rem_pio2+0x346>
 8003e2e:	2a00      	cmp	r2, #0
 8003e30:	d076      	beq.n	8003f20 <__kernel_rem_pio2+0x374>
 8003e32:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003e36:	ab0c      	add	r3, sp, #48	@ 0x30
 8003e38:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8003e3c:	f1aa 0a18 	sub.w	sl, sl, #24
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0f6      	beq.n	8003e32 <__kernel_rem_pio2+0x286>
 8003e44:	4652      	mov	r2, sl
 8003e46:	2000      	movs	r0, #0
 8003e48:	4914      	ldr	r1, [pc, #80]	@ (8003e9c <__kernel_rem_pio2+0x2f0>)
 8003e4a:	f000 f9d5 	bl	80041f8 <scalbn>
 8003e4e:	465d      	mov	r5, fp
 8003e50:	4606      	mov	r6, r0
 8003e52:	460f      	mov	r7, r1
 8003e54:	f04f 0900 	mov.w	r9, #0
 8003e58:	ab70      	add	r3, sp, #448	@ 0x1c0
 8003e5a:	f8df a044 	ldr.w	sl, [pc, #68]	@ 8003ea0 <__kernel_rem_pio2+0x2f4>
 8003e5e:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 8003e62:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 8003e66:	2d00      	cmp	r5, #0
 8003e68:	f280 80c0 	bge.w	8003fec <__kernel_rem_pio2+0x440>
 8003e6c:	465d      	mov	r5, fp
 8003e6e:	2d00      	cmp	r5, #0
 8003e70:	f2c0 80f0 	blt.w	8004054 <__kernel_rem_pio2+0x4a8>
 8003e74:	4b0d      	ldr	r3, [pc, #52]	@ (8003eac <__kernel_rem_pio2+0x300>)
 8003e76:	f04f 0900 	mov.w	r9, #0
 8003e7a:	9306      	str	r3, [sp, #24]
 8003e7c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8003e7e:	f04f 0a00 	mov.w	sl, #0
 8003e82:	2700      	movs	r7, #0
 8003e84:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 8003e88:	ebab 0605 	sub.w	r6, fp, r5
 8003e8c:	e0d6      	b.n	800403c <__kernel_rem_pio2+0x490>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	e758      	b.n	8003d46 <__kernel_rem_pio2+0x19a>
 8003e94:	080045f0 	.word	0x080045f0
 8003e98:	40200000 	.word	0x40200000
 8003e9c:	3ff00000 	.word	0x3ff00000
 8003ea0:	3e700000 	.word	0x3e700000
 8003ea4:	41700000 	.word	0x41700000
 8003ea8:	3fe00000 	.word	0x3fe00000
 8003eac:	080045b0 	.word	0x080045b0
 8003eb0:	f856 3b04 	ldr.w	r3, [r6], #4
 8003eb4:	b944      	cbnz	r4, 8003ec8 <__kernel_rem_pio2+0x31c>
 8003eb6:	b123      	cbz	r3, 8003ec2 <__kernel_rem_pio2+0x316>
 8003eb8:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8003ebc:	f846 3c04 	str.w	r3, [r6, #-4]
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	461c      	mov	r4, r3
 8003ec4:	3201      	adds	r2, #1
 8003ec6:	e745      	b.n	8003d54 <__kernel_rem_pio2+0x1a8>
 8003ec8:	1acb      	subs	r3, r1, r3
 8003eca:	e7f7      	b.n	8003ebc <__kernel_rem_pio2+0x310>
 8003ecc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8003ed0:	ab0c      	add	r3, sp, #48	@ 0x30
 8003ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ed6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003eda:	a90c      	add	r1, sp, #48	@ 0x30
 8003edc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003ee0:	e746      	b.n	8003d70 <__kernel_rem_pio2+0x1c4>
 8003ee2:	f10b 32ff 	add.w	r2, fp, #4294967295
 8003ee6:	ab0c      	add	r3, sp, #48	@ 0x30
 8003ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eec:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003ef0:	e7f3      	b.n	8003eda <__kernel_rem_pio2+0x32e>
 8003ef2:	a90c      	add	r1, sp, #48	@ 0x30
 8003ef4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	430a      	orrs	r2, r1
 8003efc:	e794      	b.n	8003e28 <__kernel_rem_pio2+0x27c>
 8003efe:	3401      	adds	r4, #1
 8003f00:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8003f04:	2a00      	cmp	r2, #0
 8003f06:	d0fa      	beq.n	8003efe <__kernel_rem_pio2+0x352>
 8003f08:	9b08      	ldr	r3, [sp, #32]
 8003f0a:	aa20      	add	r2, sp, #128	@ 0x80
 8003f0c:	445b      	add	r3, fp
 8003f0e:	f10b 0801 	add.w	r8, fp, #1
 8003f12:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8003f16:	445c      	add	r4, fp
 8003f18:	4544      	cmp	r4, r8
 8003f1a:	da04      	bge.n	8003f26 <__kernel_rem_pio2+0x37a>
 8003f1c:	46a3      	mov	fp, r4
 8003f1e:	e6bf      	b.n	8003ca0 <__kernel_rem_pio2+0xf4>
 8003f20:	2401      	movs	r4, #1
 8003f22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003f24:	e7ec      	b.n	8003f00 <__kernel_rem_pio2+0x354>
 8003f26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003f28:	46ab      	mov	fp, r5
 8003f2a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003f2e:	f7fc fb8b 	bl	8000648 <__aeabi_i2d>
 8003f32:	f04f 0900 	mov.w	r9, #0
 8003f36:	2600      	movs	r6, #0
 8003f38:	2700      	movs	r7, #0
 8003f3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f3c:	e9c5 0100 	strd	r0, r1, [r5]
 8003f40:	3b08      	subs	r3, #8
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	9b06      	ldr	r3, [sp, #24]
 8003f46:	4599      	cmp	r9, r3
 8003f48:	dd07      	ble.n	8003f5a <__kernel_rem_pio2+0x3ae>
 8003f4a:	9b07      	ldr	r3, [sp, #28]
 8003f4c:	f108 0801 	add.w	r8, r8, #1
 8003f50:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 8003f54:	3508      	adds	r5, #8
 8003f56:	9307      	str	r3, [sp, #28]
 8003f58:	e7de      	b.n	8003f18 <__kernel_rem_pio2+0x36c>
 8003f5a:	9900      	ldr	r1, [sp, #0]
 8003f5c:	f109 0901 	add.w	r9, r9, #1
 8003f60:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8003f64:	9100      	str	r1, [sp, #0]
 8003f66:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 8003f6a:	f7fc f8f1 	bl	8000150 <__aeabi_dmul>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4630      	mov	r0, r6
 8003f74:	4639      	mov	r1, r7
 8003f76:	f7fc fa1b 	bl	80003b0 <__adddf3>
 8003f7a:	4606      	mov	r6, r0
 8003f7c:	460f      	mov	r7, r1
 8003f7e:	e7e1      	b.n	8003f44 <__kernel_rem_pio2+0x398>
 8003f80:	f1ca 0200 	rsb	r2, sl, #0
 8003f84:	4640      	mov	r0, r8
 8003f86:	4649      	mov	r1, r9
 8003f88:	f000 f936 	bl	80041f8 <scalbn>
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	4b97      	ldr	r3, [pc, #604]	@ (80041ec <__kernel_rem_pio2+0x640>)
 8003f90:	4604      	mov	r4, r0
 8003f92:	460d      	mov	r5, r1
 8003f94:	f7fc fc36 	bl	8000804 <__aeabi_dcmpge>
 8003f98:	b300      	cbz	r0, 8003fdc <__kernel_rem_pio2+0x430>
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	4b94      	ldr	r3, [pc, #592]	@ (80041f0 <__kernel_rem_pio2+0x644>)
 8003f9e:	4620      	mov	r0, r4
 8003fa0:	4629      	mov	r1, r5
 8003fa2:	f7fc f8d5 	bl	8000150 <__aeabi_dmul>
 8003fa6:	f7fc fc41 	bl	800082c <__aeabi_d2iz>
 8003faa:	4606      	mov	r6, r0
 8003fac:	f7fc fb4c 	bl	8000648 <__aeabi_i2d>
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	4b8e      	ldr	r3, [pc, #568]	@ (80041ec <__kernel_rem_pio2+0x640>)
 8003fb4:	f7fc f8cc 	bl	8000150 <__aeabi_dmul>
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4602      	mov	r2, r0
 8003fbc:	4629      	mov	r1, r5
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	f7fc f9f4 	bl	80003ac <__aeabi_dsub>
 8003fc4:	f7fc fc32 	bl	800082c <__aeabi_d2iz>
 8003fc8:	ab0c      	add	r3, sp, #48	@ 0x30
 8003fca:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8003fce:	f10b 0b01 	add.w	fp, fp, #1
 8003fd2:	f10a 0a18 	add.w	sl, sl, #24
 8003fd6:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 8003fda:	e733      	b.n	8003e44 <__kernel_rem_pio2+0x298>
 8003fdc:	4620      	mov	r0, r4
 8003fde:	4629      	mov	r1, r5
 8003fe0:	f7fc fc24 	bl	800082c <__aeabi_d2iz>
 8003fe4:	ab0c      	add	r3, sp, #48	@ 0x30
 8003fe6:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8003fea:	e72b      	b.n	8003e44 <__kernel_rem_pio2+0x298>
 8003fec:	ab0c      	add	r3, sp, #48	@ 0x30
 8003fee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003ff2:	f7fc fb29 	bl	8000648 <__aeabi_i2d>
 8003ff6:	4632      	mov	r2, r6
 8003ff8:	463b      	mov	r3, r7
 8003ffa:	f7fc f8a9 	bl	8000150 <__aeabi_dmul>
 8003ffe:	464a      	mov	r2, r9
 8004000:	e868 0102 	strd	r0, r1, [r8], #-8
 8004004:	4653      	mov	r3, sl
 8004006:	4630      	mov	r0, r6
 8004008:	4639      	mov	r1, r7
 800400a:	f7fc f8a1 	bl	8000150 <__aeabi_dmul>
 800400e:	3d01      	subs	r5, #1
 8004010:	4606      	mov	r6, r0
 8004012:	460f      	mov	r7, r1
 8004014:	e727      	b.n	8003e66 <__kernel_rem_pio2+0x2ba>
 8004016:	f8dd c018 	ldr.w	ip, [sp, #24]
 800401a:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800401e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8004022:	f8cd c018 	str.w	ip, [sp, #24]
 8004026:	f7fc f893 	bl	8000150 <__aeabi_dmul>
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	4648      	mov	r0, r9
 8004030:	4651      	mov	r1, sl
 8004032:	f7fc f9bd 	bl	80003b0 <__adddf3>
 8004036:	4681      	mov	r9, r0
 8004038:	468a      	mov	sl, r1
 800403a:	3701      	adds	r7, #1
 800403c:	9b02      	ldr	r3, [sp, #8]
 800403e:	429f      	cmp	r7, r3
 8004040:	dc01      	bgt.n	8004046 <__kernel_rem_pio2+0x49a>
 8004042:	42be      	cmp	r6, r7
 8004044:	dae7      	bge.n	8004016 <__kernel_rem_pio2+0x46a>
 8004046:	ab48      	add	r3, sp, #288	@ 0x120
 8004048:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800404c:	e9c6 9a00 	strd	r9, sl, [r6]
 8004050:	3d01      	subs	r5, #1
 8004052:	e70c      	b.n	8003e6e <__kernel_rem_pio2+0x2c2>
 8004054:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8004056:	2b02      	cmp	r3, #2
 8004058:	dc09      	bgt.n	800406e <__kernel_rem_pio2+0x4c2>
 800405a:	2b00      	cmp	r3, #0
 800405c:	dc2c      	bgt.n	80040b8 <__kernel_rem_pio2+0x50c>
 800405e:	d04e      	beq.n	80040fe <__kernel_rem_pio2+0x552>
 8004060:	9b05      	ldr	r3, [sp, #20]
 8004062:	f003 0007 	and.w	r0, r3, #7
 8004066:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800406a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800406e:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8004070:	2b03      	cmp	r3, #3
 8004072:	d1f5      	bne.n	8004060 <__kernel_rem_pio2+0x4b4>
 8004074:	ab48      	add	r3, sp, #288	@ 0x120
 8004076:	441c      	add	r4, r3
 8004078:	4625      	mov	r5, r4
 800407a:	46da      	mov	sl, fp
 800407c:	f1ba 0f00 	cmp.w	sl, #0
 8004080:	dc63      	bgt.n	800414a <__kernel_rem_pio2+0x59e>
 8004082:	4625      	mov	r5, r4
 8004084:	46da      	mov	sl, fp
 8004086:	f1ba 0f01 	cmp.w	sl, #1
 800408a:	dc7b      	bgt.n	8004184 <__kernel_rem_pio2+0x5d8>
 800408c:	2000      	movs	r0, #0
 800408e:	2100      	movs	r1, #0
 8004090:	f1bb 0f01 	cmp.w	fp, #1
 8004094:	f300 8093 	bgt.w	80041be <__kernel_rem_pio2+0x612>
 8004098:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800409c:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80040a0:	9b00      	ldr	r3, [sp, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f040 8092 	bne.w	80041cc <__kernel_rem_pio2+0x620>
 80040a8:	9b04      	ldr	r3, [sp, #16]
 80040aa:	e9c3 7800 	strd	r7, r8, [r3]
 80040ae:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80040b2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80040b6:	e7d3      	b.n	8004060 <__kernel_rem_pio2+0x4b4>
 80040b8:	465d      	mov	r5, fp
 80040ba:	2000      	movs	r0, #0
 80040bc:	2100      	movs	r1, #0
 80040be:	ab48      	add	r3, sp, #288	@ 0x120
 80040c0:	441c      	add	r4, r3
 80040c2:	2d00      	cmp	r5, #0
 80040c4:	da32      	bge.n	800412c <__kernel_rem_pio2+0x580>
 80040c6:	9b00      	ldr	r3, [sp, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d035      	beq.n	8004138 <__kernel_rem_pio2+0x58c>
 80040cc:	4602      	mov	r2, r0
 80040ce:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80040d2:	9c04      	ldr	r4, [sp, #16]
 80040d4:	2501      	movs	r5, #1
 80040d6:	e9c4 2300 	strd	r2, r3, [r4]
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80040e2:	f7fc f963 	bl	80003ac <__aeabi_dsub>
 80040e6:	ac48      	add	r4, sp, #288	@ 0x120
 80040e8:	45ab      	cmp	fp, r5
 80040ea:	da28      	bge.n	800413e <__kernel_rem_pio2+0x592>
 80040ec:	9b00      	ldr	r3, [sp, #0]
 80040ee:	b113      	cbz	r3, 80040f6 <__kernel_rem_pio2+0x54a>
 80040f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80040f4:	4619      	mov	r1, r3
 80040f6:	9b04      	ldr	r3, [sp, #16]
 80040f8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80040fc:	e7b0      	b.n	8004060 <__kernel_rem_pio2+0x4b4>
 80040fe:	2000      	movs	r0, #0
 8004100:	2100      	movs	r1, #0
 8004102:	ab48      	add	r3, sp, #288	@ 0x120
 8004104:	441c      	add	r4, r3
 8004106:	f1bb 0f00 	cmp.w	fp, #0
 800410a:	da08      	bge.n	800411e <__kernel_rem_pio2+0x572>
 800410c:	9b00      	ldr	r3, [sp, #0]
 800410e:	b113      	cbz	r3, 8004116 <__kernel_rem_pio2+0x56a>
 8004110:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004114:	4619      	mov	r1, r3
 8004116:	9b04      	ldr	r3, [sp, #16]
 8004118:	e9c3 0100 	strd	r0, r1, [r3]
 800411c:	e7a0      	b.n	8004060 <__kernel_rem_pio2+0x4b4>
 800411e:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8004122:	f7fc f945 	bl	80003b0 <__adddf3>
 8004126:	f10b 3bff 	add.w	fp, fp, #4294967295
 800412a:	e7ec      	b.n	8004106 <__kernel_rem_pio2+0x55a>
 800412c:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8004130:	f7fc f93e 	bl	80003b0 <__adddf3>
 8004134:	3d01      	subs	r5, #1
 8004136:	e7c4      	b.n	80040c2 <__kernel_rem_pio2+0x516>
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	e7c9      	b.n	80040d2 <__kernel_rem_pio2+0x526>
 800413e:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 8004142:	f7fc f935 	bl	80003b0 <__adddf3>
 8004146:	3501      	adds	r5, #1
 8004148:	e7ce      	b.n	80040e8 <__kernel_rem_pio2+0x53c>
 800414a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800414e:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8004152:	4640      	mov	r0, r8
 8004154:	4649      	mov	r1, r9
 8004156:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800415a:	f7fc f929 	bl	80003b0 <__adddf3>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	4606      	mov	r6, r0
 8004164:	460f      	mov	r7, r1
 8004166:	4640      	mov	r0, r8
 8004168:	4649      	mov	r1, r9
 800416a:	f7fc f91f 	bl	80003ac <__aeabi_dsub>
 800416e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004172:	f7fc f91d 	bl	80003b0 <__adddf3>
 8004176:	e865 0102 	strd	r0, r1, [r5], #-8
 800417a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800417e:	e9c5 6700 	strd	r6, r7, [r5]
 8004182:	e77b      	b.n	800407c <__kernel_rem_pio2+0x4d0>
 8004184:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004188:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800418c:	4640      	mov	r0, r8
 800418e:	4649      	mov	r1, r9
 8004190:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004194:	f7fc f90c 	bl	80003b0 <__adddf3>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4606      	mov	r6, r0
 800419e:	460f      	mov	r7, r1
 80041a0:	4640      	mov	r0, r8
 80041a2:	4649      	mov	r1, r9
 80041a4:	f7fc f902 	bl	80003ac <__aeabi_dsub>
 80041a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80041ac:	f7fc f900 	bl	80003b0 <__adddf3>
 80041b0:	e865 0102 	strd	r0, r1, [r5], #-8
 80041b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80041b8:	e9c5 6700 	strd	r6, r7, [r5]
 80041bc:	e763      	b.n	8004086 <__kernel_rem_pio2+0x4da>
 80041be:	e874 2302 	ldrd	r2, r3, [r4], #-8
 80041c2:	f7fc f8f5 	bl	80003b0 <__adddf3>
 80041c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80041ca:	e761      	b.n	8004090 <__kernel_rem_pio2+0x4e4>
 80041cc:	9b04      	ldr	r3, [sp, #16]
 80041ce:	9a04      	ldr	r2, [sp, #16]
 80041d0:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80041d4:	601f      	str	r7, [r3, #0]
 80041d6:	605c      	str	r4, [r3, #4]
 80041d8:	609d      	str	r5, [r3, #8]
 80041da:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80041de:	60d3      	str	r3, [r2, #12]
 80041e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80041e4:	6110      	str	r0, [r2, #16]
 80041e6:	6153      	str	r3, [r2, #20]
 80041e8:	e73a      	b.n	8004060 <__kernel_rem_pio2+0x4b4>
 80041ea:	bf00      	nop
 80041ec:	41700000 	.word	0x41700000
 80041f0:	3e700000 	.word	0x3e700000
 80041f4:	00000000 	.word	0x00000000

080041f8 <scalbn>:
 80041f8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80041fc:	4616      	mov	r6, r2
 80041fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004202:	4683      	mov	fp, r0
 8004204:	468c      	mov	ip, r1
 8004206:	460b      	mov	r3, r1
 8004208:	b982      	cbnz	r2, 800422c <scalbn+0x34>
 800420a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800420e:	4303      	orrs	r3, r0
 8004210:	d039      	beq.n	8004286 <scalbn+0x8e>
 8004212:	4b2f      	ldr	r3, [pc, #188]	@ (80042d0 <scalbn+0xd8>)
 8004214:	2200      	movs	r2, #0
 8004216:	f7fb ff9b 	bl	8000150 <__aeabi_dmul>
 800421a:	4b2e      	ldr	r3, [pc, #184]	@ (80042d4 <scalbn+0xdc>)
 800421c:	4683      	mov	fp, r0
 800421e:	429e      	cmp	r6, r3
 8004220:	468c      	mov	ip, r1
 8004222:	da0d      	bge.n	8004240 <scalbn+0x48>
 8004224:	a326      	add	r3, pc, #152	@ (adr r3, 80042c0 <scalbn+0xc8>)
 8004226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422a:	e01b      	b.n	8004264 <scalbn+0x6c>
 800422c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8004230:	42ba      	cmp	r2, r7
 8004232:	d109      	bne.n	8004248 <scalbn+0x50>
 8004234:	4602      	mov	r2, r0
 8004236:	f7fc f8bb 	bl	80003b0 <__adddf3>
 800423a:	4683      	mov	fp, r0
 800423c:	468c      	mov	ip, r1
 800423e:	e022      	b.n	8004286 <scalbn+0x8e>
 8004240:	460b      	mov	r3, r1
 8004242:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004246:	3a36      	subs	r2, #54	@ 0x36
 8004248:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800424c:	428e      	cmp	r6, r1
 800424e:	dd0c      	ble.n	800426a <scalbn+0x72>
 8004250:	a31d      	add	r3, pc, #116	@ (adr r3, 80042c8 <scalbn+0xd0>)
 8004252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004256:	461c      	mov	r4, r3
 8004258:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800425c:	f361 74df 	bfi	r4, r1, #31, #1
 8004260:	4621      	mov	r1, r4
 8004262:	481d      	ldr	r0, [pc, #116]	@ (80042d8 <scalbn+0xe0>)
 8004264:	f7fb ff74 	bl	8000150 <__aeabi_dmul>
 8004268:	e7e7      	b.n	800423a <scalbn+0x42>
 800426a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800426e:	4432      	add	r2, r6
 8004270:	428a      	cmp	r2, r1
 8004272:	dced      	bgt.n	8004250 <scalbn+0x58>
 8004274:	2a00      	cmp	r2, #0
 8004276:	dd0a      	ble.n	800428e <scalbn+0x96>
 8004278:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800427c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004280:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004284:	46ac      	mov	ip, r5
 8004286:	4658      	mov	r0, fp
 8004288:	4661      	mov	r1, ip
 800428a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800428e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004292:	da09      	bge.n	80042a8 <scalbn+0xb0>
 8004294:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8004298:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800429c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 80042a0:	480e      	ldr	r0, [pc, #56]	@ (80042dc <scalbn+0xe4>)
 80042a2:	f041 011f 	orr.w	r1, r1, #31
 80042a6:	e7bd      	b.n	8004224 <scalbn+0x2c>
 80042a8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80042ac:	3236      	adds	r2, #54	@ 0x36
 80042ae:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80042b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80042b6:	4658      	mov	r0, fp
 80042b8:	4629      	mov	r1, r5
 80042ba:	2200      	movs	r2, #0
 80042bc:	4b08      	ldr	r3, [pc, #32]	@ (80042e0 <scalbn+0xe8>)
 80042be:	e7d1      	b.n	8004264 <scalbn+0x6c>
 80042c0:	c2f8f359 	.word	0xc2f8f359
 80042c4:	01a56e1f 	.word	0x01a56e1f
 80042c8:	8800759c 	.word	0x8800759c
 80042cc:	7e37e43c 	.word	0x7e37e43c
 80042d0:	43500000 	.word	0x43500000
 80042d4:	ffff3cb0 	.word	0xffff3cb0
 80042d8:	8800759c 	.word	0x8800759c
 80042dc:	c2f8f359 	.word	0xc2f8f359
 80042e0:	3c900000 	.word	0x3c900000
 80042e4:	00000000 	.word	0x00000000

080042e8 <floor>:
 80042e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042ec:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80042f0:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 80042f4:	2e13      	cmp	r6, #19
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	460c      	mov	r4, r1
 80042fc:	4605      	mov	r5, r0
 80042fe:	4680      	mov	r8, r0
 8004300:	dc35      	bgt.n	800436e <floor+0x86>
 8004302:	2e00      	cmp	r6, #0
 8004304:	da17      	bge.n	8004336 <floor+0x4e>
 8004306:	a334      	add	r3, pc, #208	@ (adr r3, 80043d8 <floor+0xf0>)
 8004308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430c:	f7fc f850 	bl	80003b0 <__adddf3>
 8004310:	2200      	movs	r2, #0
 8004312:	2300      	movs	r3, #0
 8004314:	f7fc fa80 	bl	8000818 <__aeabi_dcmpgt>
 8004318:	b150      	cbz	r0, 8004330 <floor+0x48>
 800431a:	2c00      	cmp	r4, #0
 800431c:	da57      	bge.n	80043ce <floor+0xe6>
 800431e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004322:	432c      	orrs	r4, r5
 8004324:	2500      	movs	r5, #0
 8004326:	42ac      	cmp	r4, r5
 8004328:	4c2d      	ldr	r4, [pc, #180]	@ (80043e0 <floor+0xf8>)
 800432a:	bf08      	it	eq
 800432c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004330:	4623      	mov	r3, r4
 8004332:	462a      	mov	r2, r5
 8004334:	e024      	b.n	8004380 <floor+0x98>
 8004336:	4f2b      	ldr	r7, [pc, #172]	@ (80043e4 <floor+0xfc>)
 8004338:	4137      	asrs	r7, r6
 800433a:	ea01 0c07 	and.w	ip, r1, r7
 800433e:	ea5c 0c00 	orrs.w	ip, ip, r0
 8004342:	d01d      	beq.n	8004380 <floor+0x98>
 8004344:	a324      	add	r3, pc, #144	@ (adr r3, 80043d8 <floor+0xf0>)
 8004346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434a:	f7fc f831 	bl	80003b0 <__adddf3>
 800434e:	2200      	movs	r2, #0
 8004350:	2300      	movs	r3, #0
 8004352:	f7fc fa61 	bl	8000818 <__aeabi_dcmpgt>
 8004356:	2800      	cmp	r0, #0
 8004358:	d0ea      	beq.n	8004330 <floor+0x48>
 800435a:	2c00      	cmp	r4, #0
 800435c:	bfbe      	ittt	lt
 800435e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8004362:	4133      	asrlt	r3, r6
 8004364:	18e4      	addlt	r4, r4, r3
 8004366:	2500      	movs	r5, #0
 8004368:	ea24 0407 	bic.w	r4, r4, r7
 800436c:	e7e0      	b.n	8004330 <floor+0x48>
 800436e:	2e33      	cmp	r6, #51	@ 0x33
 8004370:	dd0a      	ble.n	8004388 <floor+0xa0>
 8004372:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8004376:	d103      	bne.n	8004380 <floor+0x98>
 8004378:	f7fc f81a 	bl	80003b0 <__adddf3>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4610      	mov	r0, r2
 8004382:	4619      	mov	r1, r3
 8004384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004388:	f04f 3cff 	mov.w	ip, #4294967295
 800438c:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8004390:	fa2c f707 	lsr.w	r7, ip, r7
 8004394:	4207      	tst	r7, r0
 8004396:	d0f3      	beq.n	8004380 <floor+0x98>
 8004398:	a30f      	add	r3, pc, #60	@ (adr r3, 80043d8 <floor+0xf0>)
 800439a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439e:	f7fc f807 	bl	80003b0 <__adddf3>
 80043a2:	2200      	movs	r2, #0
 80043a4:	2300      	movs	r3, #0
 80043a6:	f7fc fa37 	bl	8000818 <__aeabi_dcmpgt>
 80043aa:	2800      	cmp	r0, #0
 80043ac:	d0c0      	beq.n	8004330 <floor+0x48>
 80043ae:	2c00      	cmp	r4, #0
 80043b0:	da0a      	bge.n	80043c8 <floor+0xe0>
 80043b2:	2e14      	cmp	r6, #20
 80043b4:	d101      	bne.n	80043ba <floor+0xd2>
 80043b6:	3401      	adds	r4, #1
 80043b8:	e006      	b.n	80043c8 <floor+0xe0>
 80043ba:	2301      	movs	r3, #1
 80043bc:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80043c0:	40b3      	lsls	r3, r6
 80043c2:	441d      	add	r5, r3
 80043c4:	4545      	cmp	r5, r8
 80043c6:	d3f6      	bcc.n	80043b6 <floor+0xce>
 80043c8:	ea25 0507 	bic.w	r5, r5, r7
 80043cc:	e7b0      	b.n	8004330 <floor+0x48>
 80043ce:	2500      	movs	r5, #0
 80043d0:	462c      	mov	r4, r5
 80043d2:	e7ad      	b.n	8004330 <floor+0x48>
 80043d4:	f3af 8000 	nop.w
 80043d8:	8800759c 	.word	0x8800759c
 80043dc:	7e37e43c 	.word	0x7e37e43c
 80043e0:	bff00000 	.word	0xbff00000
 80043e4:	000fffff 	.word	0x000fffff

080043e8 <_init>:
 80043e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ea:	bf00      	nop
 80043ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ee:	bc08      	pop	{r3}
 80043f0:	469e      	mov	lr, r3
 80043f2:	4770      	bx	lr

080043f4 <_fini>:
 80043f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f6:	bf00      	nop
 80043f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043fa:	bc08      	pop	{r3}
 80043fc:	469e      	mov	lr, r3
 80043fe:	4770      	bx	lr
